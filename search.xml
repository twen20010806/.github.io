<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>springboot-data</title>
      <link href="2021/06/13/springboot-data/"/>
      <url>2021/06/13/springboot-data/</url>
      
        <content type="html"><![CDATA[<h1 id="数据访问"><a href="#数据访问" class="headerlink" title="数据访问"></a>数据访问</h1><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><ol><li>数据源的自动配置<ol><li>导入JDBC场景</li></ol></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><img src="E:\资源\springboot-雷丰阳\springboot后源码\image-20210613115231185.png" alt="image-20210613115231185"></p><ol start="2"><li>数据库驱动为什么不导入?<ul><li>官方不知道我们需要操作什么数据库</li></ul></li><li>版本修改<ol><li>依赖就近原则,直接再pom里修改</li><li>属性就近原则,pom中properties中修改<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--改变版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.20<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="自动配置的类"><a href="#自动配置的类" class="headerlink" title="自动配置的类"></a>自动配置的类</h3><ul><li>DataSourceAutoConfiguration:数据源的自动配置<ul><li>修改数据源相关的配置:spring.datasource</li><li>数据库连接池的配置,容器中没有DataSource自动配置</li><li>底层配置好的连接池是:HikariDataSource</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123; DataSource.class, EmbeddedDatabaseType.class &#125;)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(type = &quot;io.r2dbc.spi.ConnectionFactory&quot;)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(DataSourceProperties.class)</span></span><br><span class="line"><span class="meta">@Import(&#123; DataSourcePoolMetadataProvidersConfiguration.class,</span></span><br><span class="line"><span class="meta">DataSourceInitializationConfiguration.InitializationSpecificCredentialsDataSourceInitializationConfiguration.class,</span></span><br><span class="line"><span class="meta">DataSourceInitializationConfiguration.SharedCredentialsDataSourceInitializationConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceAutoConfiguration</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>DataSourceTransactionManagerAutoConfiguration:事务管理的自动配置</li><li>JdbcTemplateAutoConfiguration:JdbcTemplate的自动配置<ul><li>可以修改这个配置项@ConfigurationProperteis(prefix=”spring.jdbc”)来修改jdbcTemplate</li><li>@Bean@Primary JdbcTemplate:容器中有此组件</li></ul></li><li>JndiDataSourceAutoConfiguration:Jndi的自动配置</li><li>XADataSourceAutoConfiguration:分布式事务相关</li></ul><h3 id="修改配置项"><a href="#修改配置项" class="headerlink" title="修改配置项"></a>修改配置项</h3><ul><li>url</li><li>driver-class-name</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssmBuild?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone</span> <span class="string">=</span> <span class="string">GMT</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="comment">#type: com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><h3 id="整合第三方技术"><a href="#整合第三方技术" class="headerlink" title="整合第三方技术"></a>整合第三方技术</h3><ul><li><p>手动配置</p><ul><li>druid<ul><li>获取DataSource连接</li><li>获取DataSource连接之后便可以开始使用JdbcTemplate进行数据库操作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@Bean</span></span><br><span class="line"><span class="comment">//此处配置是为了与配置文件相关联</span></span><br><span class="line">   <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">       DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">       <span class="keyword">return</span> dataSource;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>配置监控项(Servlet,Filter):具体看druid官方</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 配置监控Servlet</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> ServletRegistrationBean&lt;StatViewServlet&gt; <span class="title">statViewServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">       StatViewServlet statViewServlet = <span class="keyword">new</span> StatViewServlet();</span><br><span class="line">       ServletRegistrationBean&lt;StatViewServlet&gt; registrationBean = <span class="keyword">new</span> ServletRegistrationBean&lt;&gt;(statViewServlet, <span class="string">&quot;/druid/*&quot;</span>);</span><br><span class="line">       registrationBean.addInitParameter(<span class="string">&quot;loginUsername&quot;</span>,<span class="string">&quot;twen&quot;</span>);</span><br><span class="line">       registrationBean.addInitParameter(<span class="string">&quot;loginPassword&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> registrationBean;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 配置web应用监视</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> FilterRegistrationBean&lt;WebStatFilter&gt; <span class="title">webStatFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">       WebStatFilter webStatFilter = <span class="keyword">new</span> WebStatFilter();</span><br><span class="line">       FilterRegistrationBean&lt;WebStatFilter&gt; filterRegistrationBean = <span class="keyword">new</span> FilterRegistrationBean&lt;&gt;(webStatFilter);</span><br><span class="line">       <span class="comment">// &quot;/*&quot;会匹配所有路径 &quot;/**&quot;会匹配目录下的所有资源</span></span><br><span class="line">       filterRegistrationBean.setUrlPatterns(Arrays.asList(<span class="string">&quot;/*&quot;</span>));</span><br><span class="line"><span class="comment">//不对具有以下后缀的路径进行监控</span></span><br><span class="line">       filterRegistrationBean.addInitParameter(<span class="string">&quot;exclusions&quot;</span>,<span class="string">&quot;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> filterRegistrationBean;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>ServletRegistrationBean和FilterRegistrationBean都是通过反射获取属性名,所有会有addInitParameter方法传入属性名</li></ul></li></ul></li><li><p>使用druid场景启动器配置</p><ol><li>引入druid-starter</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>分析自动配置</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123;DruidDataSource.class&#125;)</span></span><br><span class="line"><span class="meta">@AutoConfigureBefore(&#123;DataSourceAutoConfiguration.class&#125;)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;DruidStatProperties.class, DataSourceProperties.class&#125;)</span></span><br><span class="line"><span class="meta">@Import(&#123;DruidSpringAopConfiguration.class, DruidStatViewServletConfiguration.class, DruidWebStatFilterConfiguration.class, DruidFilterConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidDataSourceAutoConfigure</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>DruidSpringAopConfiguration.class,监控SpringBean的,配置项:spring-datasource-druid.aop-patterns</li><li>DruidStatViewServletConfiguration.class:监控页的配置,可以手动关闭</li></ul><p><img src="E:\资源\springboot-雷丰阳\springboot后源码\image-20210613153527287.png" alt="image-20210613153527287"></p><ul><li>DruidWebStatFilterConfiguration.class:web监控配置也可手动关闭</li></ul><p><img src="E:\资源\springboot-雷丰阳\springboot后源码\image-20210613153542631.png" alt="image-20210613153542631"></p><ul><li>DruidFilterConfiguration.class:所有Druid自己的filter的配置</li></ul><p><img src="E:\资源\springboot-雷丰阳\springboot后源码\image-20210613153702566.png" alt="image-20210613153702566"></p></li></ul><h3 id="整合mybatis"><a href="#整合mybatis" class="headerlink" title="整合mybatis"></a>整合mybatis</h3><h4 id="引入mybatis的场景启动器"><a href="#引入mybatis的场景启动器" class="headerlink" title="引入mybatis的场景启动器"></a>引入mybatis的场景启动器</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="配置模式"><a href="#配置模式" class="headerlink" title="配置模式"></a>配置模式</h4><h5 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h5><ul><li>全局配置文件</li><li>SqlSessionfactory:自动配置好了</li><li>SqlSession:自动配置了<strong>SqlSessiontemplate</strong>组合了SqlSession<ul><li>Mybatis场景启动器会自动为每一个mapper接口添加一个autowired了SqlSession的实现类</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;String&gt; factoryPropertyNames = (Set)Stream.of((<span class="keyword">new</span> BeanWrapperImpl(SqlSessionFactoryBean.class)).getPropertyDescriptors()).map(FeatureDescriptor::getName).collect(Collectors.toSet());</span><br><span class="line">Class&lt;? extends LanguageDriver&gt; defaultLanguageDriver = <span class="keyword">this</span>.properties.getDefaultScriptingLanguageDriver();</span><br><span class="line"><span class="keyword">if</span> (factoryPropertyNames.contains(<span class="string">&quot;scriptingLanguageDrivers&quot;</span>) &amp;&amp; !ObjectUtils.isEmpty(<span class="keyword">this</span>.languageDrivers)) &#123;</span><br><span class="line">    factory.setScriptingLanguageDrivers(<span class="keyword">this</span>.languageDrivers);</span><br><span class="line">    <span class="keyword">if</span> (defaultLanguageDriver == <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.languageDrivers.length == <span class="number">1</span>) &#123;</span><br><span class="line">        defaultLanguageDriver = <span class="keyword">this</span>.languageDrivers[<span class="number">0</span>].getClass();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@Import(AutoConfiguredMapperScannerRegistrar.class)</li><li>Mapper:只要我们写的操作Mybatis的接口标注了Mapper注解</li></ul><h5 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h5><ol><li><p>导入Mybatis场景启动器</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写mapper接口与mapper映射器</p></li></ol><p><img src="E:\资源\springboot-雷丰阳\springboot后源码\image-20210613173123924.png" alt="image-20210613173123924"></p><ol start="3"><li><p>编写配置文件:</p><ul><li>xml映射器的位置</li><li>pojo类别名</li><li>配置文件:configuration</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span> <span class="comment">#配置映射</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.twen.springbootsysdemo1.bean</span> </span><br></pre></td></tr></table></figure></li></ol><h4 id="注解模式"><a href="#注解模式" class="headerlink" title="注解模式"></a>注解模式</h4><ul><li><p>小技巧,mapper.xml中可以使用哦个userGeneratedKeys来实现自增主键的返回,主键回填</p></li><li><p>引入mybatis-start</p></li><li><p>指定mapper-location即可</p></li><li><p>编写Mapper接口并标注@Mapper注解(使用于xml)</p></li><li><p>简单方法直接注解方式</p></li><li><p>复杂方法编写mapper.xml进行映射</p></li><li><p>@MapperScan(“packageName”),扫描Mapper接口</p></li></ul><h3 id="Mybatis-plus"><a href="#Mybatis-plus" class="headerlink" title="Mybatis-plus"></a>Mybatis-plus</h3><h4 id="什么是MyBatis-Plus"><a href="#什么是MyBatis-Plus" class="headerlink" title="什么是MyBatis-Plus?"></a>什么是MyBatis-Plus?</h4><h4 id="整合Mybatis-Plus"><a href="#整合Mybatis-Plus" class="headerlink" title="整合Mybatis-Plus:"></a>整合Mybatis-Plus:</h4><ul><li>已经导入jdbc,mybatis</li></ul><p><img src="E:\资源\springboot-雷丰阳\springboot后源码\image-20210613180312905.png" alt="image-20210613180312905"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>自动配置</p><ul><li>配置类绑定MybatisPlusProperties:底层是容器中的数据源</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123;SqlSessionFactory.class, SqlSessionFactoryBean.class&#125;)</span></span><br><span class="line"><span class="meta">@ConditionalOnSingleCandidate(DataSource.class)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;MybatisPlusProperties.class&#125;)</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(&#123;DataSourceAutoConfiguration.class, MybatisPlusLanguageDriverAutoConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusAutoConfiguration</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><img src="E:\资源\springboot-雷丰阳\springboot后源码\image-20210613180451762.png" alt="image-20210613180451762"></p><ul><li>SqlSessionFactory自动配置好</li><li>mapperLocations自动配置好:classpath:/mapper/**/*:任意包下的类路径下的所有mapper下的所有xml都是sql映射文件，建议以后都放在mapper下</li></ul><p><img src="E:\资源\springboot-雷丰阳\springboot后源码\image-20210613180800250.png" alt="image-20210613180800250"></p><ul><li>容器中也自动配置了SqlSessionTemplate</li><li>@Mapper标注的接口也会被自动扫描:建议直接@MapperScan(“path”)批量扫描就行</li></ul></li><li><p>优点:</p><ul><li>只需要Mapper接口继承BaseMapper<T>就可以拥有CRUD能力</li><li>简单查询不用写xml文件</li><li>Maybatis-plus会自动根据pojo名字找到名字相同的表</li><li>如果需要更换表名则在Mapper上通过@TableName注解更换</li></ul></li><li><p>基本查询</p><ul><li><p>tymleaf中的语法,</p><ul><li><p>sequence取出序列</p></li><li><p>{中使用()添加参数}</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dataTables_paginate paging_bootstrap pagination&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--previous--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">th:class</span>=<span class="string">&quot;$&#123;page.current == 1?&#x27;prev disabled&#x27;:&#x27;prev&#x27;&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>← Previous<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--current--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">th:class</span>=<span class="string">&quot;$&#123;number == page.current?&#x27;active&#x27;:&#x27;&#x27;&#125;&quot;</span> <span class="attr">th:each</span>=<span class="string">&quot;number:$&#123;#numbers.sequence(1,page.pages)&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/dynamic_table.html(pn=$&#123;number&#125;)&#125;&quot;</span>&gt;</span>[[$&#123;number&#125;]]<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--next--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">th:class</span>=<span class="string">&quot;$&#123;page.current == page.pages?&#x27;next disabled&#x27;:&#x27;next&#x27;&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Next → <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">       </span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>每一列的写法Restful和普通的参数传递可以同时传递:th:href=”@{/user/delete/{id}(id=${user.id},pn=${page.current})</p></li></ul></li></ul></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;tr <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;gradeX&quot;</span> th:each=<span class="string">&quot;user,stat:$&#123;page.records&#125;&quot;</span>&gt;</span><br><span class="line">    &lt;td th:text=&quot;$&#123;stat.count&#125;&quot;&gt;&lt;/td&gt;</span><br><span class="line">    &lt;td th:text=&quot;$&#123;user.id&#125;&quot;&gt;&lt;/td&gt;</span><br><span class="line">    &lt;td th:text=&quot;$&#123;user.name&#125;&quot;&gt;&lt;/td&gt;</span><br><span class="line">    &lt;td th:text=&quot;$&#123;user.age&#125;&quot;&gt;&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;[[$&#123;user.email&#125;]]&lt;/td&gt;</span><br><span class="line">    &lt;!--&lt;td&gt;Trident&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;Internet</span><br><span class="line">        Explorer 4.0&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;Win 95+&lt;/td&gt;</span><br><span class="line">    &lt;td class=&quot;center hidden-phone&quot;&gt;4&lt;/td&gt;--&gt;</span><br><span class="line">    &lt;td&gt;</span><br><span class="line">        &lt;a th:href=&quot;@&#123;/user/delete/&#123;id&#125;(id=$&#123;user.id&#125;,pn=$&#123;page.current&#125;)&#125;&quot; class=&quot;btn btn-danger btn-sm&quot; type=&quot;button&quot; &gt;delete&lt;/a&gt;</span><br><span class="line">    &lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br></pre></td></tr></table></figure><ul><li>controller中的写法<ul><li>运用redirectAttributes可以在重定向传递参数</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/user/delete/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="meta">@RequestParam(value = &quot;pn&quot;,defaultValue = &quot;1&quot;)</span> Integer pn,</span></span></span><br><span class="line"><span class="function"><span class="params">                             RedirectAttributes ra)</span></span>&#123;</span><br><span class="line">        userService.removeById(id);</span><br><span class="line">        System.out.println(<span class="string">&quot;pn&quot;</span>);</span><br><span class="line">        ra.addAttribute(<span class="string">&quot;pn&quot;</span>,pn);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/dynamic_table.html&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/dynamic_table.html&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">dynamic_table</span><span class="params">(<span class="meta">@RequestParam(value = &quot;pn&quot;,defaultValue = &quot;1&quot;)</span> Integer pn, Model model)</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; list = userService.list();</span><br><span class="line"></span><br><span class="line">        Page&lt;User&gt; userPage = <span class="keyword">new</span> Page&lt;User&gt;(pn,<span class="number">2</span>);</span><br><span class="line">        Page&lt;User&gt; page = userPage;</span><br><span class="line">        userService.page(page);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;page&quot;</span>,page);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;tables/dynamic_table&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><p>获取分页插件</p><ul><li>在config文件中配置MybatisPlusInterceptor</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 最新版</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MybatisPlusInterceptor interceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">        <span class="comment">//这是分页拦截器</span></span><br><span class="line">        PaginationInnerInterceptor paginationInnerInterceptor = <span class="keyword">new</span> PaginationInnerInterceptor();</span><br><span class="line">        paginationInnerInterceptor.setMaxLimit(<span class="number">500L</span>);</span><br><span class="line">        interceptor.addInnerInterceptor(paginationInnerInterceptor);</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>也可以使用PageHelper</li></ul></li></ul><h3 id="SQL总结"><a href="#SQL总结" class="headerlink" title="SQL总结:"></a>SQL总结:</h3><ol><li><p>导入数据源场景启动器(默认hikari)</p></li><li><p>导入mybatis或myabtis场景启动器</p></li><li><p>编写配置文件</p></li><li><p>编写mapper接口与映射器</p></li><li><p>实现</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> datasource </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring-web</title>
      <link href="2021/06/12/springboot-web/"/>
      <url>2021/06/12/springboot-web/</url>
      
        <content type="html"><![CDATA[<h1 id="1-静态资源的配置"><a href="#1-静态资源的配置" class="headerlink" title="1.静态资源的配置"></a>1.静态资源的配置</h1><h2 id="1-1、修改静态资源的默认文件夹位置以及设置静态资源可以访问的路径"><a href="#1-1、修改静态资源的默认文件夹位置以及设置静态资源可以访问的路径" class="headerlink" title="1.1、修改静态资源的默认文件夹位置以及设置静态资源可以访问的路径"></a>1.1、修改静态资源的默认文件夹位置以及设置静态资源可以访问的路径</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">static-path-pattern:</span> <span class="string">/res/**</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="attr">static-locations:</span> <span class="string">/haha</span></span><br></pre></td></tr></table></figure><h2 id="1-2、欢迎页支持"><a href="#1-2、欢迎页支持" class="headerlink" title="1.2、欢迎页支持"></a>1.2、欢迎页支持</h2><h3 id="1、静态资源下的index-html"><a href="#1、静态资源下的index-html" class="headerlink" title="1、静态资源下的index.html"></a>1、静态资源下的index.html</h3><ul><li>默认是index.html,名字不能边</li><li>如果修改了web访问路径,则不能找到主页,算是springboot的bug<h3 id="2、controller能处理-index"><a href="#2、controller能处理-index" class="headerlink" title="2、controller能处理/index"></a>2、controller能处理/index</h3></li></ul><h2 id="1-3、-静态资源配置原理"><a href="#1-3、-静态资源配置原理" class="headerlink" title="1.3、 静态资源配置原理"></a>1.3、 静态资源配置原理</h2><ul><li>SpringBoot启动默认加载 xxxAutoConfiguration类</li><li>SpringMVC功能的自动配置类 :org.SpringFrameWork.boot.autoconfigure/web/servlet/<strong>WebMvcAutoConfiguration</strong>生效<h3 id="WebMvcAutoConfiguration的注解"><a href="#WebMvcAutoConfiguration的注解" class="headerlink" title="WebMvcAutoConfiguration的注解"></a>WebMvcAutoConfiguration的注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class &#125;)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span></span><br><span class="line"><span class="meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(&#123; DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,</span></span><br><span class="line"><span class="meta">ValidationAutoConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcAutoConfiguration</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li>当容器中有WebMvcConfigurationSupport.class的Bean时,SpringBoot的自动配置不会生效<ul><li>这意味着以后我们能够全权接管springMVC的配置<h3 id="WebMvcAutoCOnfiguration的内部类-WebMvcAutoConfigurationAdapter"><a href="#WebMvcAutoCOnfiguration的内部类-WebMvcAutoConfigurationAdapter" class="headerlink" title="WebMvcAutoCOnfiguration的内部类 WebMvcAutoConfigurationAdapter"></a>WebMvcAutoCOnfiguration的内部类 WebMvcAutoConfigurationAdapter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&quot;deprecation&quot;)</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@Import(EnableWebMvcConfiguration.class)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123; WebMvcProperties.class,</span></span><br><span class="line"><span class="meta">org.springframework.boot.autoconfigure.web.ResourceProperties.class, WebProperties.class &#125;)</span></span><br><span class="line"><span class="meta">@Order(0)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcAutoConfigurationAdapter</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span>, <span class="title">ServletContextAware</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>@EnableConfigurationProperties:将此配置类于其他配置类关联<ul><li>WebMvcProperties.class：spring.mvc</li><li>org.springframework.boot.autoconfigure.web.ResourceProperties.class:spring.resources</li><li>WebProperties.class</li></ul></li><li><strong>配置中只有一个有参构造器</strong><ul><li>有参构造器所有参数的值都会从容器中确定<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WebMvcAutoConfigurationAdapter</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">//获取和spring.resources绑定的所有值的对象</span></span></span><br><span class="line"><span class="function"><span class="params">org.springframework.boot.autoconfigure.web.ResourceProperties resourceProperties,</span></span></span><br><span class="line"><span class="function"><span class="params">//获取和其他配置类</span></span></span><br><span class="line"><span class="function"><span class="params">WebProperties webProperties, WebMvcProperties mvcProperties, </span></span></span><br><span class="line"><span class="function"><span class="params">//spring的bean工厂</span></span></span><br><span class="line"><span class="function"><span class="params">ListableBeanFactory beanFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">//找到所有的messageConverters</span></span></span><br><span class="line"><span class="function"><span class="params">ObjectProvider&lt;HttpMessageConverters&gt; messageConvertersProvider,</span></span></span><br><span class="line"><span class="function"><span class="params">//找到用户的资源自定义器</span></span></span><br><span class="line"><span class="function"><span class="params">ObjectProvider&lt;ResourceHandlerRegistrationCustomizer&gt; resourceHandlerRegistrationCustomizerProvider,</span></span></span><br><span class="line"><span class="function"><span class="params">//资源处理路径</span></span></span><br><span class="line"><span class="function"><span class="params">ObjectProvider&lt;DispatcherServletPath&gt; dispatcherServletPath,</span></span></span><br><span class="line"><span class="function"><span class="params">//给应用注册原生的Servlet,Filter</span></span></span><br><span class="line"><span class="function"><span class="params">ObjectProvider&lt;ServletRegistrationBean&lt;?&gt;&gt; servletRegistrations)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.resourceProperties = resourceProperties.hasBeenCustomized() ? resourceProperties</span><br><span class="line">: webProperties.getResources();</span><br><span class="line"><span class="keyword">this</span>.mvcProperties = mvcProperties;</span><br><span class="line"><span class="keyword">this</span>.beanFactory = beanFactory;</span><br><span class="line"><span class="keyword">this</span>.messageConvertersProvider = messageConvertersProvider;</span><br><span class="line"><span class="keyword">this</span>.resourceHandlerRegistrationCustomizer = resourceHandlerRegistrationCustomizerProvider.getIfAvailable();</span><br><span class="line"><span class="keyword">this</span>.dispatcherServletPath = dispatcherServletPath;</span><br><span class="line"><span class="keyword">this</span>.servletRegistrations = servletRegistrations;</span><br><span class="line"><span class="keyword">this</span>.mvcProperties.checkConfiguration();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>相关<ul><li><p>ObjectProvider<ResourceHandlerRegistrationCustomizer> resourceHandlerRegistrationCustomizerProvider</p><ul><li>找到用户的资源自定义器</li><li>资源处理默认规则</li></ul><p>   @Override<br>   public void addResourceHandlers(ResourceHandlerRegistry registry) {</p><pre><code>   //如果静态资源路径映射开启,则默认的静态资源配置无效,isAddMappings默认true   if (!this.resourceProperties.isAddMappings()) &#123;       logger.debug(&quot;Default resource handling disabled&quot;);       return;   &#125;   addResourceHandler(registry, &quot;/webjars/**&quot;, &quot;classpath:/META-INF/resources/webjars/&quot;);   addResourceHandler(registry, this.mvcProperties.getStaticPathPattern(), (registration) -&gt; &#123;       registration.addResourceLocations(this.resourceProperties.getStaticLocations());       if (this.servletContext != null) &#123;           ServletContextResource resource = new ServletContextResource(this.servletContext, SERVLET_LOCATION);           registration.addResourceLocations(resource);       &#125;   &#125;);</code></pre><p>   }</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* 默认四个静态资源位置</span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">private static final String[] CLASSPATH_RESOURCE_LOCATIONS &#x3D; &#123; &quot;classpath:&#x2F;META-INF&#x2F;resources&#x2F;&quot;,</span><br><span class="line">&quot;classpath:&#x2F;resources&#x2F;&quot;, &quot;classpath:&#x2F;static&#x2F;&quot;, &quot;classpath:&#x2F;public&#x2F;&quot; &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>欢迎页的配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WelcomePageHandlerMapping <span class="title">welcomePageHandlerMapping</span><span class="params">(ApplicationContext applicationContext,</span></span></span><br><span class="line"><span class="function"><span class="params">FormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider)</span> </span>&#123;</span><br><span class="line">WelcomePageHandlerMapping welcomePageHandlerMapping = <span class="keyword">new</span> WelcomePageHandlerMapping(</span><br><span class="line"><span class="keyword">new</span> TemplateAvailabilityProviders(applicationContext), applicationContext, getWelcomePage(),</span><br><span class="line"><span class="keyword">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class="line">welcomePageHandlerMapping.setInterceptors(getInterceptors(mvcConversionService, mvcResourceUrlProvider));</span><br><span class="line">welcomePageHandlerMapping.setCorsConfigurations(getCorsConfigurations());</span><br><span class="line"><span class="keyword">return</span> welcomePageHandlerMapping;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>原理</p><ul><li>HandlerMapping:处理器映射,保存了每一个Handler你能处理哪些请求</li><li>WelcomePageHandlerMapping<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">WelcomePageHandlerMapping(TemplateAvailabilityProviders templateAvailabilityProviders,</span><br><span class="line">ApplicationContext applicationContext, Resource welcomePage, String staticPathPattern) &#123;</span><br><span class="line"><span class="comment">//欢迎页的映射为/**,则会走到欢迎页</span></span><br><span class="line"><span class="keyword">if</span> (welcomePage != <span class="keyword">null</span> &amp;&amp; <span class="string">&quot;/**&quot;</span>.equals(staticPathPattern)) &#123;</span><br><span class="line">logger.info(<span class="string">&quot;Adding welcome page: &quot;</span> + welcomePage);</span><br><span class="line">setRootViewName(<span class="string">&quot;forward:index.html&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果映射不为/**否则打印Adding welcome page template: index</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (welcomeTemplateExists(templateAvailabilityProviders, applicationContext)) &#123;</span><br><span class="line">logger.info(<span class="string">&quot;Adding welcome page template: index&quot;</span>);</span><br><span class="line">setRootViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ul><h2 id="1-4、-请求参数处理"><a href="#1-4、-请求参数处理" class="headerlink" title="1.4、 请求参数处理"></a>1.4、 请求参数处理</h2><h3 id="1、请求映射"><a href="#1、请求映射" class="headerlink" title="1、请求映射"></a>1、请求映射</h3><ul><li><p>@xxxMapping:</p></li><li><p>Rest风格支持</p><ul><li><p>一般表单只能处理Get,Post请求</p></li><li><p>如果需要处理Put,Delete,springBoot默认支持</p><ul><li>需要以Post方式传输,并且传输一个隐藏input<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">valule</span>=<span class="string">&quot;DELETE&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h4 id="需要springboot配置开启Rest风格"><a href="#需要springboot配置开启Rest风格" class="headerlink" title="需要springboot配置开启Rest风格"></a>需要springboot配置开启Rest风格</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(HiddenHttpMethodFilter.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;spring.mvc.hiddenmethod.filter&quot;, name = &quot;enabled&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> OrderedHiddenHttpMethodFilter <span class="title">hiddenHttpMethodFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> OrderedHiddenHttpMethodFilter();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Rest风格原理(表单提交使用Rest)<ul><li>表单提交会带上”_method”隐藏域</li><li>请求会被filter拦截,处理请求</li><li>HiddenHttpMethodFilter</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//原生request</span></span><br><span class="line">    HttpServletRequest requestToUse = request;</span><br><span class="line">      <span class="keyword">if</span> (<span class="string">&quot;POST&quot;</span>.equals(request.getMethod()) &amp;&amp; request.getAttribute(<span class="string">&quot;javax.servlet.error.exception&quot;</span>) == <span class="keyword">null</span>) &#123;</span><br><span class="line">          String paramValue = request.getParameter(<span class="keyword">this</span>.methodParam);</span><br><span class="line">          <span class="keyword">if</span> (StringUtils.hasLength(paramValue)) &#123;</span><br><span class="line"><span class="comment">//转为大写</span></span><br><span class="line">              String method = paramValue.toUpperCase(Locale.ENGLISH);</span><br><span class="line">              <span class="keyword">if</span> (ALLOWED_METHODS.contains(method)) &#123;</span><br><span class="line">                  requestToUse = <span class="keyword">new</span> HiddenHttpMethodFilter.HttpMethodRequestWrapper(request, method);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      filterChain.doFilter((ServletRequest)requestToUse, response);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">      ALLOWED_METHODS = Collections.unmodifiableList(Arrays.asList(HttpMethod.PUT.name(), HttpMethod.DELETE.name(), HttpMethod.PATCH.name()));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li><p>请求是否正常并且时POST</p><ul><li>获取到_method的值</li><li>大小写的method的value都可以</li><li>兼容以下请求,PUT,DELETE,PATCH</li><li>原生request(post),包装模式的requestWrapper重写了getmethod方法,返回的是传入的值,以后的方法调用的getMethod是调用requestWrapper的getMethod方法</li></ul></li><li><p>Rest使用客户端工具</p><ul><li>可以使用postMan直接发送put,delete等方式请求,无需使用filter</li></ul></li><li><p>因为表单只能发送get,post,所以才需要开启配置</p></li><li><p>如果前端能直接发送,则不需要开启配置</p></li><li><p>如何定制_method的名字</p><ul><li>继承HiddenHttpMethodFilter</li><li>通过setMethodParam方法修改</li></ul><p>  public void setMethodParam(String methodParam) {</p><pre><code>    Assert.hasText(methodParam, &quot;&#39;methodParam&#39; must not be empty&quot;);    this.methodParam = methodParam;</code></pre><p>}</p></li></ul><h3 id="2、普通参数与基本注解"><a href="#2、普通参数与基本注解" class="headerlink" title="2、普通参数与基本注解"></a>2、普通参数与基本注解</h3><ul><li>注解:  @PathVariable、@RequestHeader、@ModelAttribute、@RequestParam、@MatrixVariale、@CookieValue、@RequstBody<ol><li><p>@PathVariable:路径变量</p></li><li><p>@RequestHeader:获取请求头</p></li><li><p>@RequestParam:获取请求参数</p></li><li><p>@RequestBody:获取请求体[post]:只能用map封装,因为post请求是将信息封装再送</p><ul><li>以上可以用map&lt;String,String&gt;封装</li></ul></li><li><p>@CookieValue:获取cookie的值   </p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@GetMapping(&quot;/getCar/&#123;id&#125;/owner/&#123;type&#125;&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getCar</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">int</span> id,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@PathVariable(&quot;type&quot;)</span> String type,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@PathVariable</span> Map&lt;String,String&gt; carMap,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@RequestHeader(&quot;Cache-Control&quot;)</span> String date,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@RequestHeader</span> Map&lt;String,String&gt; headers,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@RequestParam(&quot;username&quot;)</span> List&lt;String&gt; username,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@RequestParam</span> Map&lt;String,String&gt; params,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@CookieValue(&quot;Idea-5e32799b&quot;)</span> String cookieVal,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@CookieValue(&quot;Idea-5e32799b&quot;)</span> Cookie cookie)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">       <span class="comment">/*map.put(&quot;id&quot;,id+&quot;&quot;);</span></span><br><span class="line"><span class="comment">       map.put(&quot;type&quot;,type);</span></span><br><span class="line"><span class="comment">       map.put(&quot;map&quot;,carMap);</span></span><br><span class="line"><span class="comment">       map.put(&quot;data:&quot;,date);</span></span><br><span class="line"><span class="comment">       map.put(&quot;headers&quot;,headers);</span></span><br><span class="line"><span class="comment">       map.put(&quot;username&quot;,username);</span></span><br><span class="line"><span class="comment">       map.put(&quot;params&quot;,params);</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">    map.put(<span class="string">&quot;cookieVal&quot;</span>,cookieVal);</span><br><span class="line">    map.put(<span class="string">&quot;cookieName&quot;</span>,cookie.getName());</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>@RequestAttribute:获取request域属性</p><ul><li>不可以用map封装</li></ul></li></ol></li></ul><ol start="7"><li><p>@MatrixVariable:矩阵变量</p><pre><code> * http://localhost/cars/sell;low=34;brand=byd,audi,yd          * 矩阵变量必须要封装在路径变量里</code></pre>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@GetMapping(&quot;/cars/sell/&#123;boss&#125;/&#123;employee&#125;&quot;)</span></span><br><span class="line">    <span class="comment">//eg:/cars/sell/boss;id=1;name=twen/employee;id=2;name=twen(boss,employee不能重名)</span></span><br><span class="line">* 如果有多个相同的变量封装在不同的路径里,需要在参数里加<span class="meta">@PathVariable</span>    </span><br><span class="line">    ```java</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">sellCars</span><span class="params">(<span class="meta">@MatrixVariable(value = &quot;id&quot;,pathVar = &quot;boss&quot;)</span> <span class="keyword">int</span> low,</span></span></span><br><span class="line"><span class="function"><span class="params">                                           <span class="meta">@MatrixVariable(&quot;brand&quot;)</span> List&lt;String&gt; brand)</span></span></span><br><span class="line"><span class="function">#### springboot默认禁用矩阵变量功能</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">* URLPathHelper-&gt;removeSemicolonContent-&gt;setRemoveSemicolonContent</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  * 对于路径处理用UrlPathHelper解析</span></span><br><span class="line"><span class="function">  * removeSemicolonContent支持矩阵变量<span class="params">(移除分号内容)</span>默认<span class="keyword">true</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">* 两种办法:都是重写configurePathMatch接口</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  1. 直接注册一个bean-&gt;WebMvcConfigurer</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  ```java</span></span><br><span class="line"><span class="function">  @Bean</span></span><br><span class="line"><span class="function">  <span class="keyword">public</span> WebMvcConfigurer <span class="title">webMvcConfigurer</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> WebMvcConfigurer() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configurePathMatch</span><span class="params">(PathMatchConfigurer configurer)</span> </span>&#123;</span><br><span class="line">              UrlPathHelper urlPathHelper = <span class="keyword">new</span> UrlPathHelper();</span><br><span class="line">              urlPathHelper.setAlwaysUseFullPath(<span class="keyword">false</span>);</span><br><span class="line">              configurer.setUrlPathHelper(urlPathHelper);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p> 实现WebMvcConfigurer接口</p></li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configurePathMatch</span><span class="params">(PathMatchConfigurer configurer)</span></span>&#123;</span><br><span class="line">    UrlPathHelper urlPathHelper = <span class="keyword">new</span> UrlPathHelper();</span><br><span class="line">    <span class="comment">//不移除分号后面的内容,矩阵变量功能可以生效</span></span><br><span class="line">    urlPathHelper.setRemoveSemicolonContent(<span class="keyword">false</span>);</span><br><span class="line">    configurer.setUrlPathHelper(urlPathHelper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果参数配置错误会出现400</li><li>Servlet API:   WebRequest、ervletRequest、MultipartRequest、HttpSession、javax.servlet.http.PushBuilder、Principal、InputStream、     Reader、HttpMethod、Locale、TimeZone、Zoneld</li><li>复杂参数   Map、Errors/BindingResult、Model、RedirectAttributes、ServletResponse、SessionStatus、UriComponentsBuilder、ServletUriComponentsBuilder</li><li>自定义对象参数 可以自动类型转化与格式化,可以级联封装</li></ul><h2 id="1-5、-参数处理的原理"><a href="#1-5、-参数处理的原理" class="headerlink" title="1.5、 参数处理的原理"></a>1.5、 参数处理的原理</h2><ul><li>HandlerMapping中能找到处理请求的Handler(Controller.method)</li><li>为当前Handler找到一个适配器HandlerAdapter:RequestMappingHandlerAdapter</li></ul><h3 id="1-HandlerAdapter"><a href="#1-HandlerAdapter" class="headerlink" title="1.HandlerAdapter"></a>1.HandlerAdapter</h3><ol><li><p>RequestMappingHandlerAdapter</p></li><li><p>HandlerFunctionAdapter</p></li></ol><h3 id="2-执行目标方法"><a href="#2-执行目标方法" class="headerlink" title="2.执行目标方法"></a>2.执行目标方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//DispatcherServlet</span></span><br><span class="line">mv = ha.handle(processedRequest,response,mappedHandler.getHandler())</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//执行目标方法</span></span><br><span class="line">mav = invokeHandlerMethod(request,response,handlerMapping)</span><br><span class="line">    </span><br><span class="line"><span class="comment">//ServletInvocableHandlerMethod,真正执行目标方法</span></span><br><span class="line">Object returnValue = invokeForRequest(webRequest,mavContainer,providedArgs)</span><br><span class="line"><span class="comment">//获取方法参数值</span></span><br><span class="line">Object[] args = getMethodArgumentValues(request,mavContainner,providedArgs)</span><br></pre></td></tr></table></figure><h3 id="3-参数解析器"><a href="#3-参数解析器" class="headerlink" title="3.参数解析器"></a>3.参数解析器</h3><ul><li>确定将要执行的目标方法的每一个参数是什么</li><li>SpringMVC目标方法能写多少种参数类型,取决于参数解析器</li></ul><p><img src="E:\资源\springboot-雷丰阳\springbootWeb\image-20210607172110860.png" alt="image-20210607172110860"></p><ul><li>当前解析器是否支持这种参数</li><li>返回值处理器</li></ul><h3 id="4、如何确定目标方法每一次参数的值"><a href="#4、如何确定目标方法每一次参数的值" class="headerlink" title="4、如何确定目标方法每一次参数的值"></a>4、如何确定目标方法每一次参数的值</h3><ul><li>InvocableHandlerMethod</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object[] getMethodArgumentValues(NativeWebRequest request, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer, Object... providedArgs) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    MethodParameter[] parameters = <span class="keyword">this</span>.getMethodParameters();</span><br><span class="line">    <span class="keyword">if</span> (ObjectUtils.isEmpty(parameters)) &#123;</span><br><span class="line">        <span class="keyword">return</span> EMPTY_ARGS;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Object[] args = <span class="keyword">new</span> Object[parameters.length];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parameters.length; ++i) &#123;</span><br><span class="line">            MethodParameter parameter = parameters[i];</span><br><span class="line">            parameter.initParameterNameDiscovery(<span class="keyword">this</span>.parameterNameDiscoverer);</span><br><span class="line">            args[i] = findProvidedArgument(parameter, providedArgs);</span><br><span class="line">            <span class="keyword">if</span> (args[i] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="keyword">this</span>.resolvers.supportsParameter(parameter)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(formatArgumentError(parameter, <span class="string">&quot;No suitable resolver&quot;</span>));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    args[i] = <span class="keyword">this</span>.resolvers.resolveArgument(parameter, mavContainer, request, <span class="keyword">this</span>.dataBinderFactory);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception var10) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                        String exMsg = var10.getMessage();</span><br><span class="line">                        <span class="keyword">if</span> (exMsg != <span class="keyword">null</span> &amp;&amp; !exMsg.contains(parameter.getExecutable().toGenericString())) &#123;</span><br><span class="line">                            logger.debug(formatArgumentError(parameter, exMsg));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">throw</span> var10;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> args;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-1、挨个判断哪个参数解析器能解析此参数"><a href="#4-1、挨个判断哪个参数解析器能解析此参数" class="headerlink" title="4.1、挨个判断哪个参数解析器能解析此参数"></a>4.1、挨个判断哪个参数解析器能解析此参数</h4><p><img src="E:\资源\springboot-雷丰阳\springbootWeb\image-20210607184055678.png" alt="image-20210607184055678"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">HandlerMethodArgumentResolver result = (HandlerMethodArgumentResolver)<span class="keyword">this</span>.argumentResolverCache.get(parameter);</span><br><span class="line"><span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line">    Iterator var3 = <span class="keyword">this</span>.argumentResolvers.iterator();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(var3.hasNext()) &#123;</span><br><span class="line">        HandlerMethodArgumentResolver resolver = (HandlerMethodArgumentResolver)var3.next();</span><br><span class="line">        <span class="keyword">if</span> (resolver.supportsParameter(parameter)) &#123;</span><br><span class="line">            result = resolver;</span><br><span class="line">            <span class="keyword">this</span>.argumentResolverCache.put(parameter, resolver);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2、解析这个参数的值"><a href="#4-2、解析这个参数的值" class="headerlink" title="4.2、解析这个参数的值"></a>4.2、解析这个参数的值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;HandlerMethodArgumentResolverComposite.class</span><br><span class="line">@Nullable</span><br><span class="line">public Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer, NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception &#123;</span><br><span class="line">    HandlerMethodArgumentResolver resolver &#x3D; this.getArgumentResolver(parameter);</span><br><span class="line">    if (resolver &#x3D;&#x3D; null) &#123;</span><br><span class="line">    throw new IllegalArgumentException(&quot;Unsupported parameter type [&quot; + parameter.getParameterType().getName() + &quot;]. supportsParameter should be called first.&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">    &#x2F;&#x2F;执行此方法解析参数</span><br><span class="line">    return resolver.resolveArgument(parameter, mavContainer, webRequest, binderFactory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xxMethodArugumentResolvers.class</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">resolveArgument</span><span class="params">(MethodParameter parameter, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer, NativeWebRequest webRequest, <span class="meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="5、复杂参数"><a href="#5、复杂参数" class="headerlink" title="5、复杂参数"></a>5、复杂参数</h3><ul><li><p>map、model(map、model里面的数据会被放在 request的请求域中,request.setAttribute),Errors/BindingResult、RedirectAttributes(重定向携带数据)、ServletResponse(response)、SessionStatus、UriComponentsBuilder、ServletUriComponentBuilder</p></li><li><p>直接传入request域</p><ul><li>map.put:</li></ul></li></ul><h4 id="map被20-MapMethodProcessor解析-返回modelAndViewContainer对象"><a href="#map被20-MapMethodProcessor解析-返回modelAndViewContainer对象" class="headerlink" title="map被20.MapMethodProcessor解析,返回modelAndViewContainer对象"></a>map被20.MapMethodProcessor解析,返回modelAndViewContainer对象</h4><pre><code>* mavContrainer.getModel():--&gt;BindingAwareModelMap是Model也是Map</code></pre><ul><li>model</li></ul><h4 id="Model被19-ModelMethodProcessor解析"><a href="#Model被19-ModelMethodProcessor解析" class="headerlink" title="Model被19.ModelMethodProcessor解析"></a>Model被19.ModelMethodProcessor解析</h4><ul><li><p>map和model类型都调用mavContainer.getModel();方法</p><ul><li>得到的mvnModel都是一样的</li></ul></li><li><p>response</p><ul><li>reponseFaced</li></ul></li><li><p>request</p><ul><li>requestFaced</li></ul></li></ul><h3 id="6、目标方法执行完成"><a href="#6、目标方法执行完成" class="headerlink" title="6、目标方法执行完成"></a>6、目标方法执行完成</h3><ul><li>将所有数据都放在ModelAndViewCOntainer中,包含要去的页面地址VIew,还包含所需的数据model</li><li>之后将modelContainer处理为纯净的只包含数据的model</li></ul><h3 id="7、处理派发结果"><a href="#7、处理派发结果" class="headerlink" title="7、处理派发结果"></a>7、处理派发结果</h3><ul><li><strong>processDispatchResult</strong>(processedRequest,response,,mappedHandler,mv,dispachException)</li><li><strong>RendderMergedOutputModel(mergedModel,getRequestToExpose(request),response)</strong>//暴露模型作为请求域的属性</li></ul><h3 id="8、自定义对象参数-pojo类"><a href="#8、自定义对象参数-pojo类" class="headerlink" title="8、自定义对象参数(pojo类)"></a>8、自定义对象参数(pojo类)</h3><h4 id="6-ServletModelAttributeMethodProcessor解析"><a href="#6-ServletModelAttributeMethodProcessor解析" class="headerlink" title="6.ServletModelAttributeMethodProcessor解析"></a>6.ServletModelAttributeMethodProcessor解析</h4><ul><li><p>ServletModelAttributeMethodProcessor有两个,一个支持前面标注解,一个支持前面不标注解</p></li><li><p>先判断是否为简单类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSimpleValueType</span><span class="params">(Class&lt;?&gt; type)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Void.class != type &amp;&amp; Void.TYPE != type &amp;&amp; (ClassUtils.isPrimitiveOrWrapper(type) || Enum.class.isAssignableFrom(type) || CharSequence.class.isAssignableFrom(type) || Number.class.isAssignableFrom(type) || Date.class.isAssignableFrom(type) || Temporal.class.isAssignableFrom(type) || URI.class == type || URL.class == type || Locale.class == type || Class.class == type);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Web数据绑定<strong>WebDataBinder binder = binderFactory.createBinder(webRequest,attribute,name);</strong></p><ul><li>WebDataBinder:web数据绑定器,将数据绑定到指定的javaBean里</li><li>WebDataBinder利用它里面的COnverters将请求取数据转成指定的数据类型,再次封装近bean对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (bindingResult == <span class="keyword">null</span>) &#123;</span><br><span class="line">            WebDataBinder binder = binderFactory.createBinder(webRequest, attribute, name);</span><br><span class="line">            <span class="keyword">if</span> (binder.getTarget() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!mavContainer.isBindingDisabled(name)) &#123;</span><br><span class="line">                    <span class="comment">//绑定参数</span></span><br><span class="line">                    <span class="keyword">this</span>.bindRequestParameters(binder, webRequest);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">this</span>.validateIfApplicable(binder, parameter);</span><br><span class="line">                <span class="keyword">if</span> (binder.getBindingResult().hasErrors() &amp;&amp; <span class="keyword">this</span>.isBindExceptionRequired(binder, parameter)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> BindException(binder.getBindingResult());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!parameter.getParameterType().isInstance(attribute)) &#123;</span><br><span class="line">                attribute = binder.convertIfNecessary(binder.getTarget(), parameter.getParameterType(), parameter);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            bindingResult = binder.getBindingResult();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ul><li>GenericConversionService:在设置每一个值的时候,找它里面的所有converter哪个可以将这个数据类型(request带来的参数(String)转换到指定类型)</li><li>可以给WebDataBinder里面放自己的Converter</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">StringToNumber</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">number</span>&gt; <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>,<span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class">//<span class="title">Converter</span>总接口</span></span><br><span class="line"><span class="class">@<span class="title">FunctionalInterface</span> <span class="title">public</span> <span class="title">interface</span> <span class="title">Converter</span>&lt;<span class="title">S</span>,<span class="title">T</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>创建pojo类-&gt;封装pojo类的属性-&gt;每次封装调用convert-&gt;从124个convert中找</li></ul></li><li><p>自定义convert实战</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WebMvcConfigurer <span class="title">webMvcConfigurer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> WebMvcConfigurer() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configurePathMatch</span><span class="params">(PathMatchConfigurer configurer)</span> </span>&#123;</span><br><span class="line">            UrlPathHelper urlPathHelper = <span class="keyword">new</span> UrlPathHelper();</span><br><span class="line">            urlPathHelper.setAlwaysUseFullPath(<span class="keyword">false</span>);</span><br><span class="line">            configurer.setUrlPathHelper(urlPathHelper);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFormatters</span><span class="params">(FormatterRegistry registry)</span> </span>&#123;</span><br><span class="line">            registry.addConverter(<span class="keyword">new</span> Converter&lt;String, Pet&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Pet <span class="title">convert</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(!StringUtils.isEmpty(s))&#123;</span><br><span class="line">                        Pet pet = <span class="keyword">new</span> Pet();</span><br><span class="line">                        String[] strings = s.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                        pet.setName(strings[<span class="number">0</span>]);</span><br><span class="line">                        pet.setAge(Integer.parseInt(strings[<span class="number">1</span>]));</span><br><span class="line">                        <span class="keyword">return</span> pet;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-6、响应原理"><a href="#1-6、响应原理" class="headerlink" title="1.6、响应原理"></a>1.6、响应原理</h2><h3 id="1-返回值解析器"><a href="#1-返回值解析器" class="headerlink" title="1.返回值解析器"></a>1.返回值解析器</h3><pre><code> 1. 返回值处理器判断是否支持这种类型返回值supportsReturnType 2. 返回值处理器调用handleReturnValue进行处理 3. RequestResponseBodyMethodProcessor可以处理返回值标了@ResponseBody注解的       1. 使用消息转换器进行写出操作;writeWithMessageConverters,利用messageConverter处理,将数据写为json            1. 内容协商:浏览器默认会以请求头的方式告诉服务器他能接收什么样的内容类型:acceptableTypes            2. 服务器最终根据自己自身的能力,决定服务器能生产什么样内容类型的数据:嵌套循环处理:producibleTypes            3. 得到输出的类型:mediaTypeToUse            4. 判断所有的messageConverters:依次判断是否能够支持输出媒体类型(可逆)                 1. 每一个messageConverter都有canRead(),canWrite()方法:是否支持将待输出的类型转为mediaType类型的数据                 2. Class转Json,Json转Class,解析可逆                 3. 每一种messageConverter的效果不同,都有一个属性包含自己支持的MediaType                      1. Byte                      2. String                      3. String                      4. Resource                      5. ResourceRegion                      6. Dom/Sax/Stax/StremSource/Source                      7. AllEncompassingFormHttpMessageConverter:                      8. MappingJackson2:返回true                      9. MappingJackson2:返回true                      10. Jaxb2:主持注解方式的xml           5. 最终MappingJackson2HttpMessageConverter把对象转为Json</code></pre><h3 id="2-返回值处理器-寻找返回值处理器"><a href="#2-返回值处理器-寻找返回值处理器" class="headerlink" title="2.返回值处理器:寻找返回值处理器"></a>2.返回值处理器:寻找返回值处理器</h3><ul><li><strong>返回值处理器</strong>先判断是否支持这种类型返回值<ol><li>SupprtsReturnType</li><li>HandleReturnValue(支持调用)</li></ol></li></ul><h3 id="3-springMVC支持哪些返回值"><a href="#3-springMVC支持哪些返回值" class="headerlink" title="3.springMVC支持哪些返回值"></a>3.springMVC支持哪些返回值</h3><ul><li>View</li><li>ModelAndView</li><li>Model</li><li>ResponseEntity</li><li>ResponseBodyEmitter</li><li>StreamingResponseBody</li><li>HttpEntity</li><li>HttpHeaders</li><li>Callable:判断是否异步</li><li>DeferredResult:</li><li>ListenableFuture</li><li>CompletionStage</li><li>WebAsynTask</li><li>标注ModelAttribute注解</li><li>RequestResponseBodyProcessor:返回值标注了@responseBody注解</li></ul><h2 id="1-7、内容协商原理"><a href="#1-7、内容协商原理" class="headerlink" title="1.7、内容协商原理"></a>1.7、内容协商原理</h2><ol><li>判断当前响应头中是否已经有确定的媒体类型。MediaType</li><li><strong>获取客户端支持接收的内容类型,获取客户端Accept请求头字段</strong><ul><li>contentNegotiationManager:内容协商管理器,默认使用基于请求头accept</li><li><strong>HeaderContentNegotiationStrategy</strong>:确定客户端可以接收的内容类型</li><li>parameterContentNegotiationStrategy:配置文件开启参数内容管理器</li></ul></li><li>遍历循环所有当前系统的MessageConverter,看谁支持操作这个对象</li><li>找到支持操作对象的converter,把converter支持的媒体类型统计出来</li><li>客户端需要,服务端能力</li></ol><h4 id="开启基于请求参数的内容协商"><a href="#开启基于请求参数的内容协商" class="headerlink" title="开启基于请求参数的内容协商"></a>开启基于请求参数的内容协商</h4><h4 id="导入jackson支持xml的包"><a href="#导入jackson支持xml的包" class="headerlink" title="导入jackson支持xml的包"></a>导入jackson支持xml的包</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">hiddenmethod:</span></span><br><span class="line">      <span class="attr">filter:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">contentnegotiation:</span></span><br><span class="line">      <span class="attr">favor-parameter:</span> <span class="literal">true</span> <span class="comment">#开启请求参数内容协商模式</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//localhost/test/person?format=json</span></span><br><span class="line">http：<span class="comment">//localhost/test/person?format=xml</span></span><br></pre></td></tr></table></figure><ul><li>确定客户端接收什么样的内容类型<ul><li>parameter策略优先返回json数据(获取请求头中的format值)</li></ul></li></ul><h4 id="自定义accept"><a href="#自定义accept" class="headerlink" title="自定义accept"></a>自定义accept</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 添加新的WebMessageConverter,可以自定义处mediaType</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> converters</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">    converters.add(<span class="keyword">new</span> TwenConverter());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwenConverter</span> <span class="keyword">implements</span> <span class="title">HttpMessageConverter</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canRead</span><span class="params">(Class&lt;?&gt; aClass, MediaType mediaType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canWrite</span><span class="params">(Class&lt;?&gt; aClass, MediaType mediaType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> aClass.isAssignableFrom(User.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;MediaType&gt; <span class="title">getSupportedMediaTypes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MediaType.parseMediaTypes(<span class="string">&quot;application/twen&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">read</span><span class="params">(Class&lt;? extends User&gt; aClass, HttpInputMessage httpInputMessage)</span> <span class="keyword">throws</span> IOException, HttpMessageNotReadableException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(User user, MediaType mediaType, HttpOutputMessage httpOutputMessage)</span> <span class="keyword">throws</span> IOException, HttpMessageNotWritableException </span>&#123;</span><br><span class="line">        <span class="comment">//自定义协议数据的写出</span></span><br><span class="line">        String data = user.getName()+<span class="string">&quot;;&quot;</span>+user.getAge();</span><br><span class="line">        OutputStream body = httpOutputMessage.getBody();</span><br><span class="line">        body.write(data.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="用url的format确定参数"><a href="#用url的format确定参数" class="headerlink" title="用url的format确定参数"></a>用url的format确定参数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 自定义策略器的配置</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> configurer</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureContentNegotiation</span><span class="params">(ContentNegotiationConfigurer configurer)</span> </span>&#123;</span><br><span class="line">    Map&lt;String, MediaType&gt; myNegotiation = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    myNegotiation.put(<span class="string">&quot;json&quot;</span>,MediaType.APPLICATION_JSON);</span><br><span class="line">    myNegotiation.put(<span class="string">&quot;xml&quot;</span>, MediaType.APPLICATION_XML);</span><br><span class="line">    myNegotiation.put(<span class="string">&quot;gg&quot;</span>,MediaType.parseMediaType(<span class="string">&quot;application/twen&quot;</span>));</span><br><span class="line">    <span class="comment">//参数策略配置器</span></span><br><span class="line">    ParameterContentNegotiationStrategy parameter = <span class="keyword">new</span> ParameterContentNegotiationStrategy(myNegotiation);</span><br><span class="line">    <span class="comment">//添加头策略配置器</span></span><br><span class="line">    HeaderContentNegotiationStrategy headerStrategy = <span class="keyword">new</span> HeaderContentNegotiationStrategy();</span><br><span class="line">    configurer.strategies(Arrays.asList(parameter,headerStrategy));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-Thymeleaf"><a href="#2-Thymeleaf" class="headerlink" title="2.Thymeleaf"></a>2.Thymeleaf</h1><h2 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1.引入依赖"></a>1.引入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-自动配置好了thmeleaf"><a href="#2-自动配置好了thmeleaf" class="headerlink" title="2.自动配置好了thmeleaf"></a>2.自动配置好了thmeleaf</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(ThymeleafProperties.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123; TemplateMode.class, SpringTemplateEngine.class &#125;)</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(&#123; WebMvcAutoConfiguration.class, WebFluxAutoConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafAutoConfiguration</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li><p>自动配好的策略</p><ul><li>所有thymeleaf的配置值都在ThymeleafProperties</li><li><strong>配置好了SpringTemplateEngine</strong></li><li><strong>配好了ThymeleafViewResolver</strong></li><li>我们只需要直接开发页面</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">&quot;classpath:/templates/&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">&quot;.html&quot;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span>twen<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;www.atguigu.com&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;$&#123;link&#125;&quot;</span>&gt;</span>去百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;www.atguigu.com&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;link&#125;&quot;</span>&gt;</span>去百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>@{/}如果加上/则会自动加上项目路径</p></li><li><p>重定向</p><ul><li><p>在使用重定向时，返回的字符串指的是一个请求，而不是一个具体的资源。并且在当前方法设置的Model的Attribute会消失，session不会。url会变成重定向设置的url。</p></li><li><dl><dt>“redirect:xxx”</dt><dd>后不加/表示不从根路径开始查找资源，而是从当前Controller查找RequestMapping的value为/xxx的请求，用于同一Controller内跳转。</dd></dl></li><li><p>“redirect:/xxx”<br>/xxx表示跳转到RequestMapping的value为/xxx的请求，这种方式既可以在不同Controller之间跳转也可以同一Controller中跳转。</p></li></ul></li></ul></li></ul><h2 id="1-项目创建"><a href="#1-项目创建" class="headerlink" title="1.项目创建"></a>1.项目创建</h2><h2 id="2-静态资源处理"><a href="#2-静态资源处理" class="headerlink" title="2.静态资源处理"></a>2.静态资源处理</h2><h2 id="3-路径构建"><a href="#3-路径构建" class="headerlink" title="3.路径构建"></a>3.路径构建</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 来登陆页</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &#123;&quot;/&quot;,&quot;/login&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">loginPage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登陆</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">main</span><span class="params">(String username,String password)</span></span>&#123;</span><br><span class="line">        <span class="comment">//登陆成功重定向到main.html</span></span><br><span class="line">        <span class="comment">//请求</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 去main页面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/index.html&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  String <span class="title">mainPage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-模板抽取"><a href="#4-模板抽取" class="headerlink" title="4.模板抽取"></a>4.模板抽取</h2><ol><li>第一种<ul><li>th:fragment=”commonheader”</li><li>th:insert=””插入:包含引入标签</li><li>th:replace插入:不包含主动引入标签</li><li>th:include:只包含引用的引用体</li></ul></li><li>运用选择器<ul><li>th:th:insert=”common::#copy-setion”<h2 id="5-页面跳转"><a href="#5-页面跳转" class="headerlink" title="5.页面跳转"></a>5.页面跳转</h2></li></ul></li></ol><h2 id="6-数据渲染"><a href="#6-数据渲染" class="headerlink" title="6.数据渲染"></a>6.数据渲染</h2><h2 id="7-视图解析原理"><a href="#7-视图解析原理" class="headerlink" title="7.视图解析原理"></a>7.视图解析原理</h2><ol><li>目标方法处理过程中,所有的数据都会被放在ModelAndViewCOntainer里。包括数据和视图地址。</li><li>方法的参数是一个自定类型对象(从请求参数中确定),把他重新放在ModelAndViewContainer</li><li>任何目标方法执行完成以后都会返回ModelAndView对象</li><li>processDispatchResult:处理派发结果(页面该如何响应)<ol><li>render(mv,request,response):进行页面渲染逻辑<ol><li>根据Controller的String返回值得到view对象[定义了页面的渲染逻辑]<ol><li>viewResolver:所有的视图解析器尝试是否能根据当前返回值得到view对象</li><li>根据”redirect:***.html”返回值得到了一个redirectViewResolver</li><li>得到了redirect:/main.html –&gt;Thymeleaf new RedirectView()</li><li>ContentNegotiationViewResolver里面包含了所有的视图解析器,内部还是利用下面所有有视图解析器得到的视图对象</li><li>视图对象是一个接口,调用View.render(mv.getModelInternal(),request,response):视图对象调用自定义的rende进行页面渲染工作<ol><li>RedirectView如何渲染</li><li>获取目标url地址</li><li>response.sendRedirec(encodedURL)<h3 id="视图解析"><a href="#视图解析" class="headerlink" title="视图解析:"></a>视图解析:</h3></li></ol></li></ol></li></ol></li></ol></li></ol><ul><li>返回值以forward开始:new InternalResourceView(forward(Url))–&gt;request.getRequestDispatcher(path).forward(request.response);</li><li>返回值以redirec开始:new RedirectView()–&gt;render就是重定向</li><li>返回值是普通字符串:new ThymeleafView()–&gt;    <h1 id="3-拦截器"><a href="#3-拦截器" class="headerlink" title="3.拦截器"></a>3.拦截器</h1><h2 id="1-拦截器使用"><a href="#1-拦截器使用" class="headerlink" title="1.拦截器使用"></a>1.拦截器使用</h2></li></ul><ol><li>定义一个拦截器对象<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Object user = request.getSession().getAttribute(<span class="string">&quot;loginUser&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(user != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            request.getRequestDispatcher(<span class="string">&quot;/&quot;</span>).forward(request,response);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HandlerInterceptor.<span class="keyword">super</span>.postHandle(request, response, handler, modelAndView);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HandlerInterceptor.<span class="keyword">super</span>.afterCompletion(request, response, handler, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>将拦截器对象注册进入webmvcConfiguer<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfiguer</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Overrides</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        LoginInterceptor loginInterceptor = <span class="keyword">new</span> LoginInterceptor();</span><br><span class="line">        <span class="comment">//给所有路径都加上此拦截器</span></span><br><span class="line">        registry.addInterceptor(loginInterceptor).addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line"><span class="comment">//去除某些路径,对于restful风格也适用</span></span><br><span class="line">        .excludePathPatterns(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;/login&quot;</span>,<span class="string">&quot;/css/**&quot;</span>,<span class="string">&quot;/fonts/**&quot;</span>,<span class="string">&quot;/images/**&quot;</span>,<span class="string">&quot;/js/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-源码解析"><a href="#2-源码解析" class="headerlink" title="2.源码解析"></a>2.源码解析</h2></li></ol><h1 id="4-文件的上传与下载"><a href="#4-文件的上传与下载" class="headerlink" title="4.文件的上传与下载"></a>4.文件的上传与下载</h1><h2 id="1-表单里添加enctype-method只能为post"><a href="#1-表单里添加enctype-method只能为post" class="headerlink" title="1.表单里添加enctype,method只能为post"></a>1.表单里添加enctype,<strong>method只能为post</strong></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form-horizontal&quot;</span> <span class="attr">role</span>=<span class="string">&quot;form&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-如果是多个文件用multiple"><a href="#2-如果是多个文件用multiple" class="headerlink" title="2.如果是多个文件用multiple"></a>2.如果是多个文件用multiple</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;exampleInputFile2&quot;</span> <span class="attr">multiple</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-controller里注解-MultiplePart-可以用单个对象或者数组"><a href="#3-controller里注解-MultiplePart-可以用单个对象或者数组" class="headerlink" title="3.controller里注解@MultiplePart,可以用单个对象或者数组"></a>3.controller里注解@MultiplePart,可以用单个对象或者数组</h2><h1 id="5-错误处理"><a href="#5-错误处理" class="headerlink" title="5.错误处理"></a>5.错误处理</h1><h2 id="1-默认规则"><a href="#1-默认规则" class="headerlink" title="1.默认规则"></a>1.默认规则</h2><pre><code>1. 默认情况下,Spring Boot提供了/error处理所有错误的映射2. 对于及其客户端,它将生成JSON响应,其中包含错误HTTP状态和异常消息的详细信息。对于浏览器客户端，响应一个“ whitelabel”错误视图，以HTML格式呈现相同的数据，比如访问不存在的页面</code></pre><p><img src="https://img-blog.csdnimg.cn/img_convert/9e5a798f34c8503ce05211ab68768e82.png" alt="image-20210203160042411"></p><h2 id="2-要对其自定义-添加View解析为error"><a href="#2-要对其自定义-添加View解析为error" class="headerlink" title="2.要对其自定义,添加View解析为error"></a>2.要对其自定义,添加View解析为error</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/eb22dd620e4ed6bfc3f7bc4df501107c.png" alt="image-20210203162152345"></p><h2 id="3-异常处理自动配置原理"><a href="#3-异常处理自动配置原理" class="headerlink" title="3.异常处理自动配置原理"></a>3.异常处理自动配置原理</h2><ul><li>ErrorMvcAutoConfiguration:自动异常配置<ul><li>容器中的组件:类型:DefaultErrorAttributes -&gt; errorAttributes<ul><li>public class <strong>DefaultErrorAttributes</strong> implements <strong>ErrorAttributes,HandlerExceptionResolver</strong></li><li>DefaultErrorAttributes:定义错误可以包含哪些数据</li></ul></li><li>容器中的组件:类型:BasicErrorController – &gt;id:basicErrorController(json+白页适配响应):修改默认错误响应<ul><li>处理默认/error路径:页面响应 new ModelAndView(“error”,model)</li><li>可以在配置文件中配置:server-error-path:修改响应页面路径</li><li>容器中有组件:view-&gt;id时error(响应默认值)</li><li>容器中放组件:BeanNameViewResolver(视图解析器):按照返回的视图名作为组件的id去容器中找到View对象</li><li>如果想要返回页面,就会找到error视图[staticView],默认时一个白页</li><li>容器中的组件:类型:DefaultErrorViewResolver -&gt; id:conventionErrorViewResolver<ul><li>如果发生错误、会以HTTP的状态码作为视图页地址(viewName),找到真正的页面</li><li>error/404.html<h2 id="4-异常处理步骤流程"><a href="#4-异常处理步骤流程" class="headerlink" title="4.异常处理步骤流程"></a>4.异常处理步骤流程</h2></li></ul></li></ul></li></ul></li></ul><ol><li>执行目标放,目标方法执行期间有任何异常都会被catch、而且标志当前请求结束,并且用<strong>dispachException</strong>处理异常</li><li>进入视图解析流畅(页面渲染)<ul><li>processDispatchResult(processedRequest,response,mappedHandler,mv,<strong>dispatchException</strong>)</li></ul></li><li>mv = pricessHandlerException;处理handler发生的异常,处理完成返回ModelAndView<ol><li>遍历所有的handlerExceptionResolvers看看谁能处理当前异常[处理异常解析器]</li><li>系统默认的异常解析器<ol><li>DefalutErrorAttributes</li><li>HandlerExceptionResolverComposite<ol><li>ExceptionhandlerExceptionResolver</li><li>ResponseStatusExceptionResolver</li><li>DefaultHandlerExceptionResolver</li></ol></li></ol><ul><li>defaultErrorAttributes先来处理异常,将异常信息保存到request域,并且返回null;</li><li>来到handlerExceptionResolverComposite下的解析器,默认没有任何处理器能处理异常,则异常会被抛出</li><li>如果没有任何人能够处理最终底层会发送/error请求—&gt;BasicErrorController</li><li>解析错误视图:遍历所有的ErrorViewResolver,看谁能解析,</li><li>默认DefaultErrorViewResolver,作用是把响应状态码作为错误页的地址</li></ul></li></ol></li></ol><h2 id="5-自定义异常"><a href="#5-自定义异常" class="headerlink" title="5.自定义异常"></a>5.自定义异常</h2><ol><li>@ControllerAdvice+@ExceptionHandler处理异常:可以处理特定出现的错误<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler(&#123;ArithmeticException.class,NullPointerException.class&#125;)</span><span class="comment">//处理异常</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handleArithException</span><span class="params">(Exception e)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index.html&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在ExceptionHandler上填写异常的.class,该注解由ExceptionHandlerExceptionResoler解析</li></ul></li><li>@ResponseStatus+自定义异常:可以自定义异常 throw Exception,该注解由ResponseStatusExceptionResolver解析<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseStatus(value = HttpStatus.FORBIDDEN,reason = &quot;测试异常&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestException</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestException</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/basic_table.html&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">basic_table</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> TestException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;tables/basic_table&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Spring底层的异常,参数类型转化异常:运用DefaultHandlerExceptionResolver</li></ol><ul><li>底层用if判断是否出现框架底层异常</li></ul><ol start="4"><li>自定义实现HandlerExceptionResolver处理异常<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Order(Ordered.HIGHEST_PRECEDENCE)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">myHandler</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            httpServletResponse.sendError(<span class="number">512</span>,<span class="string">&quot;我不喜欢的错误&quot;</span>);</span><br><span class="line">            System.out.println(<span class="number">512</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ioException) &#123;</span><br><span class="line">            ioException.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>ErrorViewResolver:实现自定义处理异常<h3 id="senError-此次请求立即结束-由tomcat发出异常被底层BasicErrorController处理"><a href="#senError-此次请求立即结束-由tomcat发出异常被底层BasicErrorController处理" class="headerlink" title="senError:此次请求立即结束,由tomcat发出异常被底层BasicErrorController处理"></a>senError:此次请求立即结束,由tomcat发出异常被底层BasicErrorController处理</h3></li></ol><h1 id="6-Web原生组件注入"><a href="#6-Web原生组件注入" class="headerlink" title="6.Web原生组件注入"></a>6.Web原生组件注入</h1><h2 id="1、使用Servlet-API"><a href="#1、使用Servlet-API" class="headerlink" title="1、使用Servlet API"></a>1、使用Servlet API</h2><ul><li>@ServletComponentScan(basePacakges = “”):指定原生Servlet组件都放在里面</li><li>@WebServlet,@WebFilter,@WebListener<h2 id="2、使用RegistrationBean-使用confige"><a href="#2、使用RegistrationBean-使用confige" class="headerlink" title="2、使用RegistrationBean:使用confige"></a>2、使用RegistrationBean:使用confige</h2></li><li>@ServletRegistrationBean</li><li>@FilterRegistrationBean</li><li>@ServletListenerRegistrationBean<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRegistBean</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">getServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        MyServlet myServlet = <span class="keyword">new</span> MyServlet();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServletRegistrationBean(myServlet,<span class="string">&quot;/get&quot;</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、为何自定义Servlet会生效"><a href="#3、为何自定义Servlet会生效" class="headerlink" title="3、为何自定义Servlet会生效?"></a>3、为何自定义Servlet会生效?</h2></li><li>SpringBoot配置的路径映射机制是最详细路径映射</li><li>DispacherServlet默认路径是/</li><li>只要Servlet路径小于/则会映射到Servlet<h1 id="7-嵌入式Web容器"><a href="#7-嵌入式Web容器" class="headerlink" title="7.嵌入式Web容器"></a>7.嵌入式Web容器</h1><h2 id="1-切换嵌入式Servlet容器"><a href="#1-切换嵌入式Servlet容器" class="headerlink" title="1.切换嵌入式Servlet容器"></a>1.切换嵌入式Servlet容器</h2></li><li>默认支持的webServer<ul><li>Tomcat,Jetty,Undertow</li><li>ServletWebServerApplicationContext,容器启动寻找ServletWebServerFactory并引导创建服务器</li></ul></li><li>切换服务器</li><li>原理<ul><li>SpringBoot应用启动发现当前是web应用</li><li>web应用会常见一个web版的IOC容器<strong>ServletWebServelApplicationContext</strong></li><li>ServletWebServerApplicationContxt启动时寻找ServletWebServerFacotry:Servlet的Web服务器工厂<h2 id="2-定制Servlet容器"><a href="#2-定制Servlet容器" class="headerlink" title="2.定制Servlet容器"></a>2.定制Servlet容器</h2></li></ul></li><li>实现<strong>WebServerFactoryCustomized<ConfigurableServletWebServerFactory></strong><ul><li>把配置文件的值和ServletServerFactory进行绑定</li></ul></li><li>修改配置文件Server.xxx</li><li>直接自定义ConfigurableServletWebServerFacotry</li></ul><ul><li>xxxxCustomeized:用于用户定制化</li></ul><h1 id="8-定制化原理"><a href="#8-定制化原理" class="headerlink" title="8.定制化原理"></a>8.定制化原理</h1><h2 id="1、定制化的常见方式"><a href="#1、定制化的常见方式" class="headerlink" title="1、定制化的常见方式"></a>1、定制化的常见方式</h2><ul><li><p>@Bean替换、增加容器中默认组件:视图解析器</p></li><li><p>修改配置文件</p></li><li><p>xxxCustomizer</p></li><li><p>编写自定义的配置类 xxxConfiguration</p></li><li><p><strong>web应用 实现 WebMvcConfiguer 即可定制化web功能</strong>+@Bean给容器中再扩展一些组件</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfiguer</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        LoginInterceptor loginInterceptor = <span class="keyword">new</span> LoginInterceptor();</span><br><span class="line">        <span class="comment">//给所有路径都加上此拦截器</span></span><br><span class="line">        registry.addInterceptor(loginInterceptor).addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">        .excludePathPatterns(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;/login&quot;</span>,<span class="string">&quot;/css/**&quot;</span>,<span class="string">&quot;/fonts/**&quot;</span>,<span class="string">&quot;/images/**&quot;</span>,<span class="string">&quot;/js/**&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>@EnableWebMvc + WebMvcConfiguer ——@Bean 可以全面接管SpringMVC,所有的规则全部自己重新配置;实现定制和扩展功能</p><ul><li><p>autoConfiguration不能生效,默认的SpringMvc的自动配置功能类。静态资源、欢迎页</p></li><li><p>一旦使用@EnableWebMvc,会导入@Import(DelegatingWebMvcConfigutation.class)</p></li><li><p>DelegatingWebMvcConfiguration,只保证了SpringMvc最基本的使用</p><ul><li>把系统中的WebMvcConfigurer拿过来依次生效,所有功能的定制都是这些WebMvcConfiguere合起来一起生效</li><li>自动配置了一些非常底层的组件。RequestMappingHandlerMapping、这些组件依赖的组件都是从容器中获取</li></ul></li><li><p>WebMvcAutoConfiguration里面的配置要生效必须:与DelegatingWebMvcConfiguration互斥(DelegatingWebMvcConfiguration继承)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span>--&gt;DelegatingWebMvcConfiguration 继承了该类</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span></span></span><br></pre></td></tr></table></figure></li><li><p>@EnableWebMvc导致了WebMvcAutoConfiguraion生效</p></li></ul></li></ul><h2 id="2、原理分析套路"><a href="#2、原理分析套路" class="headerlink" title="2、原理分析套路"></a>2、原理分析套路</h2><ul><li><strong>场景starter</strong> –xxxxAutoConfiguration-导入xxx组件-绑定xxxProperties–绑定配置文件项</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> springboot-web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot起步</title>
      <link href="2021/06/04/springboot-start/"/>
      <url>2021/06/04/springboot-start/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Getting-Start"><a href="#1-Getting-Start" class="headerlink" title="1 Getting Start"></a>1 Getting Start</h1><h2 id="1-1-SpringBoot优点"><a href="#1-1-SpringBoot优点" class="headerlink" title="1.1 SpringBoot优点"></a>1.1 SpringBoot优点</h2><ul><li>创建独立Spring应用</li><li>内嵌web服务器</li><li>自动starSter依赖,简化构建配置</li><li>自动配置Spring以及第三方功能</li><li>提供生态级别的监控、健康检查以及外部化配置</li><li>无代码生成、无需编写XML</li></ul><h2 id="1-2-SpringBoot缺点"><a href="#1-2-SpringBoot缺点" class="headerlink" title="1.2 SpringBoot缺点"></a>1.2 SpringBoot缺点</h2><ul><li>迭代快,需要时刻关注变化</li><li>封装太深,内部原理复杂,不容易精通</li></ul><h1 id="2-basic-concept"><a href="#2-basic-concept" class="headerlink" title="2 basic concept"></a>2 basic concept</h1><h2 id="2-1-微服务"><a href="#2-1-微服务" class="headerlink" title="2.1 微服务"></a>2.1 微服务</h2><ul><li><p>微服务是一种架构风格</p></li><li><p>一个应用拆分为一组小型服务</p></li><li><p>每个服务运行再自己的进程内,也就是可独立部署和升级</p></li><li><p>服务之间使用轻量级HTTP交互</p></li><li><p>服务围绕业务功能拆分</p></li><li><p>可以由全自动部署机制独立部署</p></li><li><p>去中心化、服务自治、服务可以使用不同的语言、不同的存储技术</p></li></ul><h2 id="2-2-分布式"><a href="#2-2-分布式" class="headerlink" title="2.2 分布式"></a>2.2 分布式</h2><h3 id="分布式困难"><a href="#分布式困难" class="headerlink" title="分布式困难"></a>分布式困难</h3><ul><li>远程调用</li><li>服务发现</li><li>负载均衡</li><li>服务容错</li><li>配置管理</li><li>服务监控</li><li>链路追踪</li><li>日志管理</li><li>任务调度</li><li>…<h3 id="分布式的解决"><a href="#分布式的解决" class="headerlink" title="分布式的解决"></a>分布式的解决</h3></li><li>SpringBoot+SpringCloud</li></ul><h2 id="2-3-云原生"><a href="#2-3-云原生" class="headerlink" title="2.3 云原生"></a>2.3 云原生</h2><ul><li>原生应用如何上云<h3 id="上云的困难"><a href="#上云的困难" class="headerlink" title="上云的困难"></a>上云的困难</h3></li><li>服务自愈</li><li>弹性伸缩</li><li>服务隔离</li><li>自动化部署</li><li>灰度发布</li><li>流量治理</li><li>…<h1 id="3-Hello-World"><a href="#3-Hello-World" class="headerlink" title="3 Hello World"></a>3 Hello World</h1><h2 id="2-1-创建"><a href="#2-1-创建" class="headerlink" title="2.1 创建"></a>2.1 创建</h2></li><li>导入springboot父工程<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-parent --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>导入springbootweb场景启动器<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>引入jar插件,把项目达成jar包,直接在目标服务器执行<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-2-引入依赖"><a href="#2-2-引入依赖" class="headerlink" title="2.2 引入依赖"></a>2.2 引入依赖</h2><h2 id="2-3-创建主程序"><a href="#2-3-创建主程序" class="headerlink" title="2.3 创建主程序"></a>2.3 创建主程序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MainApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-编写业务"><a href="#2-4-编写业务" class="headerlink" title="2.4 编写业务"></a>2.4 编写业务</h2><h2 id="2-5-测试"><a href="#2-5-测试" class="headerlink" title="2.5 测试"></a>2.5 测试</h2><h2 id="2-6-简化配置"><a href="#2-6-简化配置" class="headerlink" title="2.6 简化配置"></a>2.6 简化配置</h2></li><li>统一配置</li><li>只需要抽取一个配置文件放在resources下</li><li>修改tomcat服务器端口<h2 id="2-7-简化部署"><a href="#2-7-简化部署" class="headerlink" title="2.7 简化部署"></a>2.7 简化部署</h2></li><li>引入fat jars,可以用maven-jar打包方式而不用war</li></ul><h1 id="4、自动配置原理"><a href="#4、自动配置原理" class="headerlink" title="4、自动配置原理"></a>4、自动配置原理</h1><h2 id="4-1、管理依赖版本号"><a href="#4-1、管理依赖版本号" class="headerlink" title="4.1、管理依赖版本号"></a>4.1、管理依赖版本号</h2><ul><li><p>依赖管理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>父依赖的父依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>自动版本仲裁</p></li><li><p>可以在pom文件直接修改,依赖就近原则下</p></li><li><p>也可以,查看spring-boot-dependencies里的key</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>5.7.1<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.20<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>自动依赖版本管理只会管理版本,不会自动添加依赖</p></li><li><p><strong>何为starter?</strong></p><ul><li>spring-boot-starter-*, *为某种场景</li><li>例如,spring-boot-starter-web:为web场景的starter</li><li>starter抽取了常用的依赖并进行了依赖管理</li><li>如果非官方的starter</li><li>*-spring-boot-starter,第三方简化开发的场景启动器</li><li>引入非版本仲裁的jar,一定要写版本号</li><li>所有场景启动器依赖最底层的依赖是spring-boot-starter<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-2、自动配置"><a href="#4-2、自动配置" class="headerlink" title="4.2、自动配置"></a>4.2、自动配置</h2></li></ul></li><li><p>自动配好Tomcat</p><ul><li>引入Tomcat依赖,配置</li><li>配置Tomcat<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>自动配置好SpringMVC</p><ul><li>引入SpringMVC全套组件</li><li>自动配好SpringMVC常用组件</li></ul></li><li><p>自动配好Web常见功能,如:字符编码问题</p><ul><li>SpringBoot帮我们配置好了所有web开发的常见场景</li></ul></li><li><p>默认的包结构</p><ul><li>主程序所在的包及其下面的所有子包里面的组件都会被默认扫描</li><li>无需配置以前的包扫描</li><li>想要改变扫描路径<ul><li>使用@SpringBootApplication(ScanBasePackages=”com.atguigu”)</li><li>@ComponentScan指定扫描路径</li></ul></li><li>一个@SpringBootApplication于三个注解<br>  @SpringBootConfiguration<br>  @EnableAutoConfiguration<br>  @ComponentScan(“com.twen.springboot”)</li></ul></li><li><p>各种配置拥有默认值</p><ul><li>默认配置最终都是映射到一个类上</li><li>配置文件的值最终会绑定到某个类上,这个类会在容器中创建对象</li></ul></li><li><p>按需加载所有自动配置项</p><ul><li><p>依赖按需加载</p></li><li><p>引入了哪些场景这个场景的自动配置才会开启</p></li><li><p>pringBoot所有的自动配置功能都在</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">* 配置类:@Configuration</span><br><span class="line"></span><br><span class="line">  ```java</span><br><span class="line">  @Configuration(proxyBeanMethods = true)//lite或full模式</span><br><span class="line">  public class MyConfig &#123;</span><br><span class="line">  @Bean</span><br><span class="line">      public User user01()&#123;</span><br><span class="line">          User user = new User(&quot;zhangsan&quot;, 18);</span><br><span class="line">          //User组件依赖了tomcat</span><br><span class="line">          user.setPet(tomcat());</span><br><span class="line">          return user;</span><br><span class="line">      &#125;</span><br><span class="line">      @Bean(&quot;tom&quot;)</span><br><span class="line">      public Pet tomcat()&#123;</span><br><span class="line">          return new Pet();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>配置类的@Bean注册的组件默认Singelton</p><ul><li>以方法名为Bean名</li><li>Component只能注册简单的组件</li></ul></li><li><p>@Configuration配置类默认也是一个组件</p></li><li><p>默认@Configuration(proxyBeanMethods = true)</p><ul><li>获取到的对象本身就是代理对象,注解中的值为true,获取代理对象</li><li>如果为true则不会被代理</li><li>代理Bean方法,被代理的@Bean方法会默认单例</li><li>外部无论对配置类中@Bean方法配置多少次,默认都是同一个对象</li></ul></li><li><p>最佳实战</p><ul><li>配置类组件之间无依赖管理用lite模式加速容器启动过程、减少判断</li><li>配置类组件之间有依赖关系,方法会被调用得到之间的单实例组件、用full模式</li></ul></li></ul></li><li><p>@Bean、@Component、@Controller、@Service、@Repository </p></li><li><p>@ComponentScan、@Import</p><ul><li>@ComponentScan扫描包</li><li>@Import:<ul><li>将指定类型组件导入,给容器中自动创建出这两个类型的组件</li><li>可以写在任意一个组件上</li><li>默认组件名字是全类名</li></ul></li></ul></li><li><p>@Conditional:根据条件装配</p><ul><li>加载方法上,当条件成立,该方法才会生效</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnBean(name = &quot;tom&quot;)</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">user01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    <span class="comment">//User组件依赖了tomcat</span></span><br><span class="line">    user.setPet(tomcat());</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Pet <span class="title">tomcat</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Pet();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named <span class="string">&#x27;user01&#x27;</span> available</span><br></pre></td></tr></table></figure><ul><li>加载类上<ul><li>当条件成立,该类下面的所有配置才会生效</li></ul></li></ul></li><li><p>.xml原生配置文件的引入,@ImportResource(“classpath:*.xml”)</p></li><li><p><strong>配置绑定</strong>:使用javaBean类来进行 配置</p><ol><li><p>@Component+@ConfigurationProperties,注册配置组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;mycar&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">     <span class="meta">@RestController</span></span><br><span class="line">     <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Controller1</span> </span>&#123;</span><br><span class="line">         <span class="meta">@Autowired</span></span><br><span class="line">         Car car;</span><br><span class="line">     </span><br><span class="line">         <span class="meta">@RequestMapping(&quot;/car&quot;)</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> Car <span class="title">mycar</span><span class="params">()</span></span>&#123;</span><br><span class="line">             <span class="keyword">return</span> car;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125; </span><br><span class="line"><span class="number">2.</span>  在配置类里<span class="meta">@EnableConfigurationProperties(Class *)</span>:</span><br><span class="line"></span><br><span class="line">   * 开启容器配置</span><br><span class="line">   * 自动注入容器</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 配置一定有两步</span><br><span class="line"></span><br><span class="line">   <span class="number">1.</span>  配置绑定<span class="meta">@ConfigurationProperties</span></span><br><span class="line">   <span class="number">2.</span>  注册Bean类<span class="meta">@Component</span>或<span class="meta">@EnableConfigurationProperties</span></span><br><span class="line">## 4.3、自动配置原理解析</span><br><span class="line"></span><br><span class="line">### 1.引导加载自动配置类</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(excludeFilters = &#123; @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span></span><br><span class="line"><span class="meta">@Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br></pre></td></tr></table></figure></li></ol></li></ul><ol><li><p><strong>@SpringBootConfiguration</strong></p><ul><li>底层@Configuration、代表当前是一个配置类</li></ul></li><li><p>@ComponentScan</p><ul><li>指定扫描哪些，Spring注解</li></ul></li><li><p>@EnableAutoConfiguration</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import(AutoConfigurationImportSelector.class)</span></span><br></pre></td></tr></table></figure><ol><li><p>AutoConfigurationPackage:指定默认包规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(AutoConfigurationPackages.Registrar.class)</span><span class="comment">//给容器中导入组件,批量注册</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AutoConfigurationPackage &#123;&#125;<span class="comment">//将指定的一个包下面组件注入</span></span><br></pre></td></tr></table></figure><ul><li>利用Registrar导入一系列组件AutoConfigurationPackages的内部类注册器:registrar</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">    register(registry, <span class="keyword">new</span> PackageImports(metadata).getPackageNames().toArray(<span class="keyword">new</span> String[<span class="number">0</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Import(AutoConfigurationImportSelector.class):导入指定包</p><ul><li>AutoConfigurationImportSelector</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class="line">        <span class="keyword">return</span> NO_IMPORTS;</span><br><span class="line">    &#125;</span><br><span class="line">    AutoConfigurationEntry autoConfigurationEntry = getAutoConfigurationEntry(annotationMetadata);</span><br><span class="line">    <span class="keyword">return</span> StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>getAutoConfigurationEntry:调用同类方法得到自动配置入口</p><ul><li>同样的类中的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> AutoConfigurationEntry <span class="title">getAutoConfigurationEntry</span><span class="params">(AnnotationMetadata annotationMetadata)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class="line">        <span class="keyword">return</span> EMPTY_ENTRY;</span><br><span class="line">    &#125;</span><br><span class="line">    AnnotationAttributes attributes = getAttributes(annotationMetadata);</span><br><span class="line">    <span class="comment">//获取候选配置</span></span><br><span class="line">    List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class="line">    <span class="comment">//去除重复配置</span></span><br><span class="line">    configurations = removeDuplicates(configurations);</span><br><span class="line">    <span class="comment">//得到筛选条件</span></span><br><span class="line">    Set&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes);</span><br><span class="line">    checkExcludedClasses(configurations, exclusions);</span><br><span class="line">  <span class="comment">//根据条件移除</span></span><br><span class="line">    configurations.removeAll(exclusions);</span><br><span class="line">    configurations = getConfigurationClassFilter().filter(configurations);</span><br><span class="line">    fireAutoConfigurationImportEvents(configurations, exclusions);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> AutoConfigurationEntry(configurations, exclusions);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>getCandidateConfigurations:同类中的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> List&lt;String&gt; <span class="title">getCandidateConfigurations</span><span class="params">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//工厂加载器加载获取得到所有组件名</span></span><br><span class="line">    List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(),</span><br><span class="line">                                                                         getBeanClassLoader());</span><br><span class="line">    Assert.notEmpty(configurations, <span class="string">&quot;No auto configuration classes found in META-INF/spring.factories. If you &quot;</span></span><br><span class="line">                    + <span class="string">&quot;are using a custom packaging, make sure that file is correct.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> configurations;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>springBoot默认的配置类全在spring-boot-autofiguer/META-INF/spring.factories里</li></ul></li></ul></li></ol><h3 id="2-按需开启自动配置项"><a href="#2-按需开启自动配置项" class="headerlink" title="2. 按需开启自动配置项"></a>2. 按需开启自动配置项</h3><pre><code> * 虽然所有的默认配置类会在启动时默认全部加载,但是会按需配置,但是按照条件装配原则,相应的配置类会被@Conditional所按需装配 * 所以springboot实际上加载了自动配置类,而自动配置类里又有内部配置类,内部配置类根据条件选择是否配置,以及具体配置所需要的包需要自己导入</code></pre><h3 id="3-修改默认配置"><a href="#3-修改默认配置" class="headerlink" title="3. 修改默认配置"></a>3. 修改默认配置</h3><pre><code> * 总结   * springBoot先加载所有的自动配置类,xxxxAutoConfiguration(xxxxProperties.class)   * 每个自动配置类按照条件进行生效,每一个配置类生效,默认都会绑定配置文件指定的值(),xxxProperties里面拿,xxxProperties和配置文件进行了绑定    * 如果生效,生效的配置类给容器中装配很多组件   * 只要容器中有组件,功能生效   * 只要用户有自己配置的,以用户优先   * 定制化配置     * 用户直接自己@Bean替换底层组件     * 修改配置文件</code></pre><h3 id="4-最佳实践"><a href="#4-最佳实践" class="headerlink" title="4. 最佳实践"></a>4. 最佳实践</h3><pre><code> * 引入场景依赖 * 查看自动配置了哪些   * 自己分析   * 在配置文件中debug=true开启自动配置报告 Negative(不生效)\Positive(生效) * 是否需要修改   * 参照文档修改配置项     * 自己分析,xxxproperties绑定了配置文件哪些比如,mysql   * 自定义加入或者替换组件     * @Bean,@component   * 额外的自定义器</code></pre><h1 id="5-开发小技巧"><a href="#5-开发小技巧" class="headerlink" title="5. 开发小技巧"></a>5. 开发小技巧</h1><h2 id="5-1、-Lombok"><a href="#5-1、-Lombok" class="headerlink" title="5.1、 Lombok"></a>5.1、 Lombok</h2><ul><li>用于javaBean的创建<h2 id="5-2、-Spring-Initailizer"><a href="#5-2、-Spring-Initailizer" class="headerlink" title="5.2、 Spring Initailizer"></a>5.2、 Spring Initailizer</h2></li><li>IDEA创建项目时自动配置<h2 id="5-3、-dev-tools"><a href="#5-3、-dev-tools" class="headerlink" title="5.3、 dev-tools"></a>5.3、 dev-tools</h2></li><li>用于热部署,bug较多<h1 id="6-YAML"><a href="#6-YAML" class="headerlink" title="6. YAML"></a>6. YAML</h1></li><li>用YAML代替properties配置<h2 id="6-1-语法"><a href="#6-1-语法" class="headerlink" title="6.1 语法"></a>6.1 语法</h2></li><li>类似于json写法</li><li>key-val</li><li>对象,map<ul><li>单行配置需要使用{}</li><li>多行配置 key:[space]value</li></ul></li><li>数组,集合<ul><li>单行配置需要使用[]</li><li>多行配置需要使用 -[space]value</li></ul></li><li>自我理解<ul><li>数组结合的-也许是默认的key</li></ul></li><li>配置优先级<ul><li>properties文件优先级最高</li><li>yaml文件优先级较低</li></ul></li></ul><h2 id="6-2-实践"><a href="#6-2-实践" class="headerlink" title="6.2 实践"></a>6.2 实践</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">person1:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">张三</span></span><br><span class="line">  <span class="attr">hobbies:</span> [<span class="string">&quot;吃饭&quot;</span>,<span class="string">&quot;睡觉&quot;</span>,<span class="string">&quot;打豆豆&quot;</span>]</span><br><span class="line">  <span class="attr">pet:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">大猫</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">  <span class="attr">pets:</span></span><br><span class="line">    <span class="attr">sick:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">猫老大</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">猫老二</span></span><br><span class="line">    <span class="attr">helth:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">猫老三</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">猫老四</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobbies;</span><br><span class="line">    <span class="keyword">private</span> Pet pet;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,List&lt;String&gt;&gt; pets;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-3-省略配置文件提示工具的打包"><a href="#5-3-省略配置文件提示工具的打包" class="headerlink" title="5.3 省略配置文件提示工具的打包"></a>5.3 省略配置文件提示工具的打包</h2><ol><li><p>依赖加入配置文件提示工具</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>省略此依赖的打包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="7、SpringBoot的默认静态资源"><a href="#7、SpringBoot的默认静态资源" class="headerlink" title="7、SpringBoot的默认静态资源"></a>7、SpringBoot的默认静态资源</h1></li></ol><h2 id="7-1-默认静态资源文件夹"><a href="#7-1-默认静态资源文件夹" class="headerlink" title="7.1. 默认静态资源文件夹"></a>7.1. 默认静态资源文件夹</h2><ol><li><p><strong>META-INF/resources/</strong></p></li><li><p><strong>resources</strong></p></li><li><p><strong>static</strong></p></li><li><p><strong>public</strong></p></li></ol><h2 id="7-2-修改默认静态资源文件夹"><a href="#7-2-修改默认静态资源文件夹" class="headerlink" title="7.2.修改默认静态资源文件夹"></a>7.2.修改默认静态资源文件夹</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="attr">static-locations:</span> <span class="string">classpath:/haha</span></span><br></pre></td></tr></table></figure><ul><li><strong>将默认静态资源文件夹改为/哈哈下的文件</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> microServer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整合ssm</title>
      <link href="2021/05/27/ssmbuild/"/>
      <url>2021/05/27/ssmbuild/</url>
      
        <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul><li><strong>IDEA</strong></li><li><strong>MySQL 8.2.0</strong></li><li><strong>Tomcat 9</strong></li><li><strong>Maven3.6</strong><h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="pom静态资源"><a href="#pom静态资源" class="headerlink" title="pom静态资源"></a>pom静态资源</h1><pre><code>&lt;resources&gt;        &lt;resource&gt;            &lt;directory&gt;../mybatis-08/src/main/java&lt;/directory&gt;            &lt;includes&gt;                &lt;include&gt;**/*.xml&lt;/include&gt;                &lt;include&gt;**/*.properties&lt;/include&gt;            &lt;/includes&gt;            &lt;filtering&gt;true&lt;/filtering&gt;        &lt;/resource&gt;        &lt;resource&gt;            &lt;directory&gt;../mybatis-08/src/main/resources&lt;/directory&gt;            &lt;includes&gt;                &lt;include&gt;**/*.xml&lt;/include&gt;                &lt;include&gt;**/*.properties&lt;/include&gt;            &lt;/includes&gt;            &lt;filtering&gt;true&lt;/filtering&gt;        &lt;/resource&gt;&lt;/resources&gt; </code></pre><h1 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h1><pre><code>jdbc:mysql://localhost:3306/mybatis?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true&amp;serverTimezone = GMT</code></pre><h1 id="编写配置文件"><a href="#编写配置文件" class="headerlink" title="编写配置文件"></a>编写配置文件</h1><ol><li>mybatis-config</li><li>applicationContext.xml</li><li>数据库配置文件:druid.properties</li></ol><h1 id="整合Mybatis层-Mapper-Pojo"><a href="#整合Mybatis层-Mapper-Pojo" class="headerlink" title="整合Mybatis层:Mapper,Pojo"></a>整合Mybatis层:Mapper,Pojo</h1><ul><li><p>applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--新:关联数据库配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:druid.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driverClassName&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.initialSize&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxActive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.maxActive&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxWait&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.maxWait&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SqlSessionFactory--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--绑定mybatis配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置dao接口扫描包,动态实现dao接口可以注入到spring容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入sqlSessionFactory--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--要扫描的dao包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.twen.ssmBuild.dao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>mybaits-config.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--log settings--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;setting name=&quot;logImpl&quot; value=&quot;LOG4J&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--显示开启全局缓存--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--aliases--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.twen.ssmBuild.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注册mapper--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.twen.ssmBuild.dao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="整合Spring层-Mybatis、Application"><a href="#整合Spring层-Mybatis、Application" class="headerlink" title="整合Spring层:Mybatis、Application"></a>整合Spring层:Mybatis、Application</h1><ul><li>查看Mybatis</li></ul><h1 id="整合SpringMVC层-Controller"><a href="#整合SpringMVC层-Controller" class="headerlink" title="整合SpringMVC层:Controller"></a>整合SpringMVC层:Controller</h1><ul><li><p>springMVC</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注解驱动,如果使用jackSon注意编码问题--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--静态资源过滤--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--扫描包:controller--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.twen.ssmBuild.controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>spring-service</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span> <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.twen.ssmBuild.service&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.twen.ssmBuild.service.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookMapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--声明式事务配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;update*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--声明切入点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pt1&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.twen.ssmBuild.service.BookService.*())&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--织入事务--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pt1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="关于spring-service"><a href="#关于spring-service" class="headerlink" title="关于spring-service"></a>关于spring-service</h1><ul><li>因为service业务较广,所以需要给其配置事务</li></ul><h1 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h1><ul><li><p>用application获取sqlSession/sqlSessionFactory</p><ul><li><p>获取数据库配置文件(placeHolder)</p></li><li><p>注册数据源</p></li><li><p>获取sqlSessionFactory</p></li><li><p>用application注册具体的dao实现类(可以使用自动)</p></li></ul></li><li><p>用springmvc注册controller:扫描包</p><ol><li>注册驱动</li><li>静态资源过滤</li><li>扫描包</li><li>视图解析器</li></ol></li><li><p>使用spring-service注册service,配置事务</p><ol><li><p>事务配置</p><ol><li>注册DataSource的TransactionManager</li><li>编辑事务通知</li><li>织入事务</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--编织事务--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--使用数据源的TransactionManager--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--事务--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--给update方法编织事务--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--propagation:传播方式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;update*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--织入事务--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--切入点--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pt1&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.twen.ssmbuildByMySelf.service.BookService.*())&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--织入事务--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pt1&quot;</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li><li><p>Web-INF下</p><ol><li>获取DispatcherServlet</li><li>使用Filter屏蔽乱码问题</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssm </tag>
            
            <tag> 整合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC</title>
      <link href="2021/05/27/SpringMVC/"/>
      <url>2021/05/27/SpringMVC/</url>
      
        <content type="html"><![CDATA[<h1 id="1、初始"><a href="#1、初始" class="headerlink" title="1、初始"></a>1、初始</h1><h2 id="1-1概述"><a href="#1-1概述" class="headerlink" title="1.1概述"></a>1.1概述</h2><ol><li>springMVC是基于java实现的MVC框架<ul><li>MVC是模型(Model)、视图(View)、控制器(Controller)的简写，是一种软件设计规范。</li><li>是将业务逻辑、数据、显示分离的方法来组织代码。</li><li>MVC主要作用是<strong>降低了视图与业务逻辑间的双向偶合</strong>。</li><li>MVC不是一种设计模式，<strong>MVC是一种架构模式</strong>。当然不同的MVC存在差异</li></ul></li></ol><h2 id="1-2基于maven的javaweb"><a href="#1-2基于maven的javaweb" class="headerlink" title="1.2基于maven的javaweb"></a>1.2基于maven的javaweb</h2><ol><li><p>导入包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet.jsp/jsp-api --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet.jsp.jstl/jstl --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/jstl --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h1 id="2、什么是SpringMVC"><a href="#2、什么是SpringMVC" class="headerlink" title="2、什么是SpringMVC"></a>2、什么是SpringMVC</h1><h2 id="2、1概述"><a href="#2、1概述" class="headerlink" title="2、1概述"></a>2、1概述</h2><p>Spring MVC是Spring Framework的一部分，是基于Java实现MVC的轻量级Web框架。</p><p>查看官方文档：<a href="https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web">https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web</a></p><p><strong>我们为什么要学习SpringMVC呢?</strong></p><p> Spring MVC的特点：</p><ol><li>轻量级，简单易学</li><li>高效 , 基于请求响应的MVC框架</li><li>与Spring兼容性好，无缝结合</li><li>约定优于配置</li><li>功能强大：RESTful、数据验证、格式化、本地化、主题等</li><li>简洁灵活</li></ol><p>Spring的web框架围绕<strong>DispatcherServlet</strong> [ 调度Servlet ] 设计。</p><p>DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解形式进行开发，十分简洁；</p><p>正因为SpringMVC好 , 简单 , 便捷 , 易学 , 天生和Spring无缝集成(使用SpringIoC和Aop) , 使用约定优于配置 . 能够进行简单的junit测试 . 支持Restful风格 .异常处理 , 本地化 , 国际化 , 数据验证 , 类型转换 , 拦截器 等等……所以我们要学习 .</p><p><strong>最重要的一点还是用的人多 , 使用的公司多 .</strong></p><h3 id="2-2、中心控制器"><a href="#2-2、中心控制器" class="headerlink" title="2.2、中心控制器"></a>2.2、中心控制器</h3><p>​    Spring的web框架围绕DispatcherServlet设计。DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解的controller声明方式。</p><p>​    Spring MVC框架像许多其他MVC框架一样, <strong>以请求为驱动</strong> , <strong>围绕一个中心Servlet分派请求及提供其他功能</strong>，**DispatcherServlet是一个实际的Servlet (它继承自HttpServlet 基类)**。</p><h3 id="2-3、SpringMVC执行原理"><a href="#2-3、SpringMVC执行原理" class="headerlink" title="2.3、SpringMVC执行原理"></a>2.3、<strong>SpringMVC执行原理</strong></h3><p><img src="E:\资源\SMM-狂神\SpringMVC\springMVC\640.png" alt="640"></p><ol><li><p>第一部分,接收请求,找到控制器名字</p><ol><li>HandlerMapping,接收用户请求,找到控制器的名字</li><li>HandlerExecution执行handler返回数据到DispatcherServlet</li></ol></li><li><p>第二部分根据控制器名字适配控制器</p><ol><li>HandlerAdapter,适配控制器,找到对应的控制器并且执行响应conotroller</li><li>对应的controller完成相应业务逻辑,返回封装有模型和视图的ModelAndView对象</li></ol></li><li><p>第三部分</p><ol><li>ViewResolver处理对应的视图与模型,找到视图,根据模型渲染视图</li><li>ViewResolver将渲染好的视图传回给DispatcherServlet并返回给用户<h3 id="2-4-使用注解开发"><a href="#2-4-使用注解开发" class="headerlink" title="2.4 使用注解开发"></a>2.4 使用注解开发</h3></li></ol></li><li><p>依旧在web.xml中配置DispatcherServler</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>完成springmvc-servlet的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.twen.springMVC04.controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 让Spring MVC不处理静态资源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    支持mvc注解驱动</span></span><br><span class="line"><span class="comment">        在spring中一般采用@RequestMapping注解来完成映射关系</span></span><br><span class="line"><span class="comment">        要想使@RequestMapping注解生效</span></span><br><span class="line"><span class="comment">        必须向上下文中注册DefaultAnnotationHandlerMapping</span></span><br><span class="line"><span class="comment">        和一个AnnotationMethodHandlerAdapter实例</span></span><br><span class="line"><span class="comment">        这两个实例分别在类级别和方法级别处理。</span></span><br><span class="line"><span class="comment">        而annotation-driven配置帮助我们自动完成上述两个实例的注入。</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用注解开发类</p><ol><li>controller:(component的衍生,用于注解注册bean)</li><li>RequsetMapping:用于请求的映射,可以嵌套</li><li>方法<ol><li>returnType-String(“返回的view的地址,其中前缀后缀都已经在配置文件中配置”)</li><li>传入参数model(“传入的参数,用于封装数据”)</li></ol></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/ho&quot;)</span><br><span class="line">public class HelloController &#123;</span><br><span class="line">    @RequestMapping(&quot;/hello&quot;)</span><br><span class="line">    public String returnView(Model model)&#123;</span><br><span class="line">        //封装数据</span><br><span class="line">        model.addAttribute(&quot;msg&quot;,&quot;helloAnnotation&quot;);</span><br><span class="line"></span><br><span class="line">        return &quot;hello&quot;;//会被视图解析器处理</span><br><span class="line">    &#125;</span><br><span class="line">    @RequestMapping(&quot;/hello1&quot;)</span><br><span class="line">    public String returnView1(Model model)&#123;</span><br><span class="line">        //封装数据</span><br><span class="line">        model.addAttribute(&quot;msg&quot;,&quot;helloAnnotation1&quot;);</span><br><span class="line"></span><br><span class="line">        return &quot;hello&quot;;//会被视图解析器处理</span><br><span class="line">    &#125;</span><br><span class="line">    @RequestMapping(&quot;/hello2&quot;)</span><br><span class="line">    public String returnView2(Model model)&#123;</span><br><span class="line">        //封装数据</span><br><span class="line">        model.addAttribute(&quot;msg&quot;,&quot;helloAnnotation2&quot;);</span><br><span class="line"></span><br><span class="line">        return &quot;hello&quot;;//会被视图解析器处理</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-5-小知识点"><a href="#2-5-小知识点" class="headerlink" title="2.5 小知识点"></a>2.5 小知识点</h3><ol><li>在springMVC中的 / 和 /*<ul><li>/ 只会匹配所有的请求,不会匹配jsp页面</li><li>/* 匹配所有的请求,包括jsp页面</li></ul></li><li> 关于classpath和classpath*</li></ol><ul><li>classpath会匹配当前类路径下的文件</li><li>classpath*匹配所有路径文件</li></ul><ol start="3"><li>启动级别<ul><li>load-on-startup</li></ul></li><li>处理器<ol><li>BeanNameUrlHandlerMapping<ul><li>只会根据bean的名字去适配</li></ul></li></ol></li></ol><h3 id="2-6-restful风格"><a href="#2-6-restful风格" class="headerlink" title="2.6 restful风格"></a>2.6 restful风格</h3><ul><li><p>传统方式操作资源:通过不同的参数来实现不同的效果</p><ul><li><p><a href="http://127.0.0.1/item/queryItem.action?id=1">http://127.0.0.1/item/queryItem.action?id=1</a> 查询,GET</p></li><li><p><a href="http://127.0.0.1/item/saveItem.action">http://127.0.0.1/item/saveItem.action</a> 新增,POST</p></li><li><p><a href="http://127.0.0.1/item/updateItem.action">http://127.0.0.1/item/updateItem.action</a> 更新,POST</p></li><li><p><a href="http://127.0.0.1/item/deleteItem.action?id=1">http://127.0.0.1/item/deleteItem.action?id=1</a> 删除,GET或POST</p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springMVC </tag>
            
            <tag> java </tag>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注解使用MVC</title>
      <link href="2021/05/26/springMVCAnnotation/"/>
      <url>2021/05/26/springMVCAnnotation/</url>
      
        <content type="html"><![CDATA[<h1 id="使用注解开发"><a href="#使用注解开发" class="headerlink" title="使用注解开发"></a>使用注解开发</h1><h2 id="1-依旧在web-xml中配置DispatcherServler"><a href="#1-依旧在web-xml中配置DispatcherServler" class="headerlink" title="1.依旧在web.xml中配置DispatcherServler"></a>1.依旧在web.xml中配置DispatcherServler</h2>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-完成springmvc-servlet的配置"><a href="#2-完成springmvc-servlet的配置" class="headerlink" title="2.完成springmvc-servlet的配置"></a>2.完成springmvc-servlet的配置</h2>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.twen.springMVC04.controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 让Spring MVC不处理静态资源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    支持mvc注解驱动</span></span><br><span class="line"><span class="comment">        在spring中一般采用@RequestMapping注解来完成映射关系</span></span><br><span class="line"><span class="comment">        要想使@RequestMapping注解生效</span></span><br><span class="line"><span class="comment">        必须向上下文中注册DefaultAnnotationHandlerMapping</span></span><br><span class="line"><span class="comment">        和一个AnnotationMethodHandlerAdapter实例</span></span><br><span class="line"><span class="comment">        这两个实例分别在类级别和方法级别处理。</span></span><br><span class="line"><span class="comment">        而annotation-driven配置帮助我们自动完成上述两个实例的注入。</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-使用注解开发的类"><a href="#3-使用注解开发的类" class="headerlink" title="3.使用注解开发的类"></a>3.使用注解开发的类</h2><ol><li>controller:(component的衍生,用于注解注册bean)<ol><li>Controller</li><li>Service</li><li>Repository</li><li>component</li></ol></li><li>RequsetMapping:用于请求的映射,可以嵌套</li><li>方法<ol><li>returnType-String(“返回的view的地址,其中前缀后缀都已经在配置文件中配置”)</li><li>传入参数model(“传入的参数,用于封装数据”)</li></ol></li></ol>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/ho&quot;)</span><br><span class="line">public class HelloController &#123;</span><br><span class="line">    @RequestMapping(&quot;/hello&quot;)</span><br><span class="line">    public String returnView(Model model)&#123;</span><br><span class="line">        //封装数据</span><br><span class="line">        model.addAttribute(&quot;msg&quot;,&quot;helloAnnotation&quot;);</span><br><span class="line"></span><br><span class="line">        return &quot;hello&quot;;//会被视图解析器处理</span><br><span class="line">    &#125;</span><br><span class="line">    @RequestMapping(&quot;/hello1&quot;)</span><br><span class="line">    public String returnView1(Model model)&#123;</span><br><span class="line">        //封装数据</span><br><span class="line">        model.addAttribute(&quot;msg&quot;,&quot;helloAnnotation1&quot;);</span><br><span class="line"></span><br><span class="line">        return &quot;hello&quot;;//会被视图解析器处理</span><br><span class="line">    &#125;</span><br><span class="line">    @RequestMapping(&quot;/hello2&quot;)</span><br><span class="line">    public String returnView2(Model model)&#123;</span><br><span class="line">        //封装数据</span><br><span class="line">        model.addAttribute(&quot;msg&quot;,&quot;helloAnnotation2&quot;);</span><br><span class="line"></span><br><span class="line">        return &quot;hello&quot;;//会被视图解析器处理</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springMVC </tag>
            
            <tag> java </tag>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis基础</title>
      <link href="2021/05/21/mybatis/"/>
      <url>2021/05/21/mybatis/</url>
      
        <content type="html"><![CDATA[<p>#1、Mybais简介</p><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h2><ul><li>github地址：<a href="https://github.com/mybatis/mybatis-3">https://github.com/mybatis/mybatis-3</a></li><li>mybatis中文文档:<a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></li><li>xml配置<pre><code>      &lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;      &lt;dependency&gt;          &lt;groupId&gt;org.mybatis&lt;/groupId&gt;          &lt;artifactId&gt;mybatis&lt;/artifactId&gt;          &lt;version&gt;3.5.2&lt;/version&gt;      &lt;/dependency&gt;</code></pre></li></ul><h2 id="1-持久化"><a href="#1-持久化" class="headerlink" title="1 持久化"></a>1 持久化</h2><ul><li><p>数据持久化</p><ul><li>持久化就是将程序的数据再持久状态和瞬时状态转化的过程</li><li>内存:<strong>断电即失</strong></li><li>数据库(jdbc),io文件持久化</li></ul></li><li><p><strong>为什么需要持久化?</strong></p><ul><li>有一些对象,不能让他丢掉</li><li>内存稀缺 <h2 id="1-持久层"><a href="#1-持久层" class="headerlink" title="1 持久层"></a>1 持久层</h2></li></ul></li><li><p>Dao层,Service层,Controller层</p><ul><li>完成持久化工作的代码块</li><li>层界限十分明显。<h2 id="1-为什么需要Mybatis"><a href="#1-为什么需要Mybatis" class="headerlink" title="1 为什么需要Mybatis"></a>1 为什么需要Mybatis</h2></li></ul></li><li><p>帮助程序员将数据存入到数据库中</p></li><li><p>方便</p></li><li><p>传统的JDBC代码太复杂了。简化,框架。</p></li><li><p>不用Mybatis也可以。更容易上手,<strong>技术没有高低之分</strong></p></li><li><p>接触sql与程序代码的耦合,sql和代码的分离</p></li><li><p>提供映射标签,支持对象与数据库的orm字段关系映射</p></li><li><p>提供对象关系映射标签,支持对象关系组件维护</p></li><li><p>提供xml标签,支持编写动态sql</p></li><li><p><strong>最重要的一点:使用的人多!</strong></p></li><li><p>Spring Spring MVN Spring Boot</p></li></ul><pre><code>    &lt;dependency&gt;        &lt;groupId&gt;mysql&lt;/groupId&gt;        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;        &lt;version&gt;8.0.20&lt;/version&gt;    &lt;/dependency&gt;    &lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;        &lt;version&gt;3.5.2&lt;/version&gt;    &lt;/dependency&gt;</code></pre><p>#2 熟悉mybatis</p><h2 id="2、第一个Mybatis程序"><a href="#2、第一个Mybatis程序" class="headerlink" title="2、第一个Mybatis程序"></a>2、第一个Mybatis程序</h2><ol><li><p>搭建数据库</p></li><li><p>新建项目   </p></li><li><p>删除src目录</p></li><li><p>导入mvn依赖</p><h2 id="2、创建一个模块"><a href="#2、创建一个模块" class="headerlink" title="2、创建一个模块"></a>2、创建一个模块</h2></li><li><p>编写Mybatis核心配置文件</p><ol><li>连接数据库</li></ol></li><li><p>获取sqlSessionFactory</p><ol><li><p>读取Mybatis核心配置文件</p></li><li><p>获取sqlSessionFactoryBuilder,通过sqlSessionFactoryBuilder.build(InputStream is)拿取sqlSessionFactory</p></li><li><p>总结:流读取resources中的Mybatis核心配置文件</p><pre><code> &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt; &lt;!DOCTYPE configuration         PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;         &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt; &lt;!--核心配置文件--&gt; &lt;configuration&gt;     &lt;!--配置多套环境--&gt;     &lt;environments default=&quot;development&quot;&gt;         &lt;environment id=&quot;development&quot;&gt;             &lt;transactionManager type=&quot;JDBC&quot;/&gt;             &lt;dataSource type=&quot;POOLED&quot;&gt;                 &lt;property name=&quot;driver&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;/&gt;                 &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/test?useUnicode=true&amp;amp;characterEncoding=utf-8&amp;amp;useSSL=true&amp;amp;serverTimezone = GMT&quot;/&gt;                 &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;                 &lt;property name=&quot;password&quot; value=&quot;123456&quot;/&gt;             &lt;/dataSource&gt;         &lt;/environment&gt;     &lt;/environments&gt;     &lt;!--&lt;mappers&gt;         &lt;mapper resource=&quot;com/twen/mybatis_01/dao/UserMapper.xml&quot;&gt;&lt;/mapper&gt;     &lt;/mappers&gt;--&gt; &lt;/configuration&gt;    </code></pre></li></ol></li><li><p>创建pojo实体类</p></li><li><p>创建Mapper,Mapper.xml</p><pre><code> &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt; &lt;!DOCTYPE mapper         PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;         &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.twen.mybatis_01.dao.UserMapper&quot;&gt;     &lt;!--查询语句--&gt;     &lt;select id=&quot;getUserList&quot; resultType=&quot;com.twen.mybatis_01.pojo.User&quot;&gt;         SELECT * FROM mybatis.user     &lt;/select&gt; &lt;/mapper&gt;</code></pre></li><li><p>在Mybatis核心配置文件中绑定Mapper  </p></li></ol><ol start="6"><li>tips:每生成一个Mapper就得将此Mapper添加到核心配置文件的mappers中</li><li><mapper resource="com/twen/mybatis_01/dao/UserMapper.xml"></mapper></li></ol><h2 id="2-测试"><a href="#2-测试" class="headerlink" title="2 测试"></a>2 测试</h2><ul><li><p>遇到的错误1</p><ol><li><p>无法找到非java项目的配置文件</p><pre><code> ### Error building SqlSession. ### The error may exist in com.twen.mybatis_01.dao.UserMapper ### Cause: org.apache.ibatis.builder.BuilderException: Error parsing SQL Mapper Configuration. Cause: java.io.IOException: Could not find resource com.twen.mybatis_01.dao.UserMapper  </code></pre></li><li><p>maven中添加配置</p><pre><code> &lt;resources&gt;     &lt;resource&gt;         &lt;directory&gt;src/main/java&lt;/directory&gt;         &lt;includes&gt;             &lt;include&gt;**/*.xml&lt;/include&gt;             &lt;include&gt;**/*.properties&lt;/include&gt;         &lt;/includes&gt;         &lt;filtering&gt;true&lt;/filtering&gt;     &lt;/resource&gt;     &lt;resource&gt;         &lt;directory&gt;src/main/resources&lt;/directory&gt;         &lt;includes&gt;             &lt;include&gt;**/*.xml&lt;/include&gt;             &lt;include&gt;**/*.properties&lt;/include&gt;         &lt;/includes&gt;         &lt;filtering&gt;true&lt;/filtering&gt;     &lt;/resource&gt; &lt;/resources&gt; </code></pre></li></ol></li><li><p>错误2</p><ol><li>无法加载mysql驱动</li><li>添加mysql-connerctor配置文件   </li></ol></li><li><p>错误3</p><ol><li>查询结果为null</li><li>查询的表需要用数据库名.表名</li></ol></li><li><p>错误4</p><ol><li>配置文件生成成功,但是找不到配置文件</li><li>配置文件路径写错,不能写成※.※,而是要※/※</li></ol></li><li><p>错误5</p><ol><li>namespace为空</li><li><mapper namespace="全限定名">## 2总结</li></ol></li></ul><ol><li>配置mybatis核心配置文件,数据库</li><li>创建实体类</li><li>创建dao包,创建mapper</li><li>将创建好的mapper添加进核心配置文件       </li><li>实际上,就是用xml文件取代了实现类</li><li>xml文件中的命名空间namespace绑定Mapper,指定返回值类型,全限定名<br>#3 数据库操作<h2 id="3-CRUD操作"><a href="#3-CRUD操作" class="headerlink" title="3 CRUD操作"></a>3 CRUD操作</h2></li><li>namespace<ol><li>namespace中的包名要和Dao/Mapper中的包名一致</li></ol></li><li>select <ol><li>选择查询语句</li><li>id:对应 的namespace中的方法名</li><li>resultType:Sql语句执行的返回值</li><li>parameterType:参数类型</li></ol></li><li>insert</li><li>delete</li><li>update</li></ol><ol start="3"><li>tips:<ol><li>resultType和parameterType默认为int,如果为int可不写</li><li>SqlSession默认支持事务,增删改之后必须提交<h2 id="3-万能的Map"><a href="#3-万能的Map" class="headerlink" title="3 万能的Map"></a>3 万能的Map</h2></li></ol></li><li>假设,实体类中对象的参数过多,可以使用map存储数据</li><li>map中的sql键值可以更改,需要与map保持一致,map中的key可以随意定制。对象传递参数,直接在sql中取对象的属性</li><li>只有一个基本类型参数的情况下,可以直接在sql中取到,随意名字,但是#{}中必须有值,多个参数用map或者**(????)**<h2 id="3-模糊查询"><a href="#3-模糊查询" class="headerlink" title="3 模糊查询"></a>3 模糊查询</h2></li><li>传递参数的时候在两边拼接%%</li><li>第二种方式,在sql中拼接”%”,”%”,但是存在sql注入问题,尽量少使用String作为参数<pre><code> &lt;select id=&quot;fuzzyQuery&quot; resultType=&quot;com.twen.mybatis_02.pojo.User&quot; parameterType=&quot;string&quot;&gt;     SELECT * FROM user WHERE name LIKE &quot;%&quot;#&#123;name&#125;&quot;%&quot;; &lt;/select&gt;</code></pre></li></ol><h1 id="4、配置解析"><a href="#4、配置解析" class="headerlink" title="4、配置解析"></a>4、配置解析</h1><h2 id="4-核心配置文件"><a href="#4-核心配置文件" class="headerlink" title="4 核心配置文件"></a>4 核心配置文件</h2><ul><li><p>mybatis.xml</p></li><li><p>Mybatis的配置文件包含了会深深影响Mybatis欣慰的设置和属性信息</p><pre><code>  configuration（配置）      properties（属性）      settings（设置）      typeAliases（类型别名）      typeHandlers（类型处理器）      objectFactory（对象工厂）      plugins（插件）      environments（环境配置）      environment（环境变量）      transactionManager（事务管理器）      dataSource（数据源）      databaseIdProvider（数据库厂商标识）      mappers（映射器）</code></pre></li><li><p>环境配置(environments)</p><ul><li>MyBatis可以配置多套运行环境</li><li>不过要记住:尽管可以配hi多个环境,但每个SqlSessionFactory实例只能许选择一种环境</li><li>学会使用配置多套运行环境</li><li>Mybatis默认的事务管理器是JDBC,连接池:Pooled:支持池化(UnPooled,JNP)</li></ul></li><li><p>属性(properties)</p><ul><li><p>可以动态配置properties</p></li><li><p>可以直接引入外部文件,注意顺序<properteis resource=""/></p><pre><code>  &lt;properties resource=&quot;db.properties&quot;/&gt;  &lt;properties resource=&quot;db.properties&quot;&gt;      &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;    &lt;/properties&gt;</code></pre></li><li><p>可以在其中增加一些属性配置</p></li><li><p>如果在properties标签中添加了<property>属性,会先读取内部的property属性,在读取外部的配置文件,如果外部文件有同样的名字的属性,则会被覆盖</p></li></ul></li><li><p>类型别名(typeAliases)</p><ol><li>替换冗余类名<ul><li><p>可以将类型设置为一个短的名字</p></li><li><p>存在的意义仅在于用来减少类完全限定名的冗余</p><pre><code>  &lt;typeAliases&gt;      &lt;typeAlias type=&quot;com.twen.mybatis_02.pojo.User&quot; alias=&quot;User&quot;/&gt;  &lt;/typeAliases&gt;</code></pre></li><li><p>此句的的作用是将com.twen.mybatis_02.pojo.User 替换为User假名</p></li></ul></li><li>扫描包获取类(该类大小写可以随意,但是推荐小写,为了方便别人看,推荐小写)<pre><code> &lt;typeAliases&gt;     &lt;package name=&quot;com.twen.mybatis_02.pojo&quot;/&gt; &lt;/typeAliases&gt;</code></pre><ul><li>这里在xml文件中可以直接填写实体类名,推荐使用小写</li></ul></li><li>关于java内置的类型别名<ol><li>int 原始类型 _int</li><li>Integer 包装类型 int</li></ol></li></ol></li><li><p>设置settings</p></li></ul><table><thead><tr><th>设置名</th><th>描述</th><th>有效值</th><th>默认值</th></tr></thead><tbody><tr><td>cacheEnabled</td><td>全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。</td><td>true / false</td><td>true</td></tr><tr><td>lazyLoadingEnabled</td><td>延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 fetchType 属性来覆盖该项的开关状态。</td><td>true / false</td><td>false</td></tr><tr><td>mapUnderscoreToCamelCase</td><td>是否开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn。</td><td>true / false</td><td>false</td></tr></tbody></table><ul><li><p>配置完整的属性</p><pre><code>  &lt;settings&gt;        &lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;        &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt;        &lt;setting name=&quot;multipleResultSetsEnabled&quot; value=&quot;true&quot;/&gt;        &lt;setting name=&quot;useColumnLabel&quot; value=&quot;true&quot;/&gt;        &lt;setting name=&quot;useGeneratedKeys&quot; value=&quot;false&quot;/&gt;        &lt;setting name=&quot;autoMappingBehavior&quot; value=&quot;PARTIAL&quot;/&gt;        &lt;setting name=&quot;autoMappingUnknownColumnBehavior&quot; value=&quot;WARNING&quot;/&gt;        &lt;setting name=&quot;defaultExecutorType&quot; value=&quot;SIMPLE&quot;/&gt;        &lt;setting name=&quot;defaultStatementTimeout&quot; value=&quot;25&quot;/&gt;        &lt;setting name=&quot;defaultFetchSize&quot; value=&quot;100&quot;/&gt;        &lt;setting name=&quot;safeRowBoundsEnabled&quot; value=&quot;false&quot;/&gt;        &lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;false&quot;/&gt;        &lt;setting name=&quot;localCacheScope&quot; value=&quot;SESSION&quot;/&gt;        &lt;setting name=&quot;jdbcTypeForNull&quot; value=&quot;OTHER&quot;/&gt;        &lt;setting name=&quot;lazyLoadTriggerMethods&quot; value=&quot;equals,clone,hashCode,toString&quot;/&gt;  &lt;/settings&gt;        </code></pre></li><li><p>映射器:注册Mapper时使用</p><ol><li><p>resouce:项目下的mapper少,用resouce”注意使用/“</p></li><li><p>url:一般不使用</p></li><li><p>class:一般用resouce代替,类的全限定名</p></li><li><p>name:将包内的映射器结构实现全部注册为映射器,包的全限定名</p><ul><li><p>用name要保证Mapper.xml必须与mapper.java(interface)名字相同,不然会无法完成注册</p></li><li><p>class同理,class和package可以使用注解</p><pre><code>  &lt;!-- 使用相对于类路径的资源引用 --&gt;  &lt;mappers&gt;    &lt;mapper resource=&quot;org/mybatis/builder/AuthorMapper.xml&quot;/&gt;    &lt;mapper resource=&quot;org/mybatis/builder/BlogMapper.xml&quot;/&gt;    &lt;mapper resource=&quot;org/mybatis/builder/PostMapper.xml&quot;/&gt;  &lt;/mappers&gt;  &lt;!-- 使用完全限定资源定位符（URL） --&gt;  &lt;mappers&gt;    &lt;mapper url=&quot;file:///var/mappers/AuthorMapper.xml&quot;/&gt;    &lt;mapper url=&quot;file:///var/mappers/BlogMapper.xml&quot;/&gt;    &lt;mapper url=&quot;file:///var/mappers/PostMapper.xml&quot;/&gt;  &lt;/mappers&gt;  &lt;!-- 使用映射器接口实现类的完全限定类名 --&gt;  &lt;mappers&gt;    &lt;mapper class=&quot;org.mybatis.builder.AuthorMapper&quot;/&gt;    &lt;mapper class=&quot;org.mybatis.builder.BlogMapper&quot;/&gt;    &lt;mapper class=&quot;org.mybatis.builder.PostMapper&quot;/&gt;  &lt;/mappers&gt;  &lt;!-- 将包内的映射器接口实现全部注册为映射器 --&gt;  &lt;mappers&gt;    &lt;package name=&quot;org.mybatis.builder&quot;/&gt;  &lt;/mappers&gt;</code></pre></li></ul></li></ol></li></ul><h3 id="关于mybatis-config-xml的配置"><a href="#关于mybatis-config-xml的配置" class="headerlink" title="关于mybatis-config.xml的配置"></a>关于mybatis-config.xml的配置</h3><ul><li>设置Aliases是为了能在返回时好写,减少代码冗余</li><li>设置Mappers里的路径是为了注册Mapper</li><li>设置额外的配置文件properties是为了能够将程序解耦,以后修改配置文件就可以运行不同的数据库<h2 id="4-声明周期和作用域"><a href="#4-声明周期和作用域" class="headerlink" title="4 声明周期和作用域"></a>4 声明周期和作用域</h2><h4 id="不同作用域和生命周期类别是至关重要的，因为错误的使用会导致非常严重的并发问题"><a href="#不同作用域和生命周期类别是至关重要的，因为错误的使用会导致非常严重的并发问题" class="headerlink" title="不同作用域和生命周期类别是至关重要的，因为错误的使用会导致非常严重的并发问题"></a>不同作用域和生命周期类别是至关重要的，因为错误的使用会导致非常严重的并发问题</h4></li></ul><ol><li>SqlSessionFactoryBuilder<ul><li>一旦创建SqlSessionFactory此类就不用了</li><li>局部变量</li></ul></li><li>SqlSessionFactory<ul><li>说白了就是数据库连接池</li><li>一旦被创建就应该在引用的运行期间一致存在</li><li>最简单的就是使用单例模式或者静态单例模式</li></ul></li><li>SqlSession    <ul><li>连接到连接池的一个请求,每个业务逻辑开始创建,业务逻辑结束关闭</li><li>实例不是线程安全的,不能被共享</li><li>用完需要赶紧关闭,否则资源被占用<img src="E:\资源\SMM-狂神\MyBatis\mybatis基础\三对象关系.jpg" alt="三对象关系"><h1 id="5、解决属性名和字段名不一致的问题"><a href="#5、解决属性名和字段名不一致的问题" class="headerlink" title="5、解决属性名和字段名不一致的问题"></a>5、解决属性名和字段名不一致的问题</h1></li></ul></li></ol><ul><li><p>使用resultMap</p></li><li><p>resultMap是Mybatis中最强大的类</p><pre><code>  &lt;resultMap id=&quot;userMapper&quot; type=&quot;user&quot;&gt;      &lt;result column=&quot;id&quot; property=&quot;id&quot;/&gt;  &lt;/resultMap&gt;  &lt;select id=&quot;getUserList&quot; resultMap=&quot;userMapper&quot;&gt;      SELECT * FROM user  &lt;/select&gt;</code></pre></li></ul><h1 id="6、日志"><a href="#6、日志" class="headerlink" title="6、日志"></a>6、日志</h1><h2 id="6、日志工厂"><a href="#6、日志工厂" class="headerlink" title="6、日志工厂"></a>6、日志工厂</h2><ul><li>如果一个数据库操作出现了异常,我们需要排错。日志时最好的助手</li></ul><p><img src="E:\资源\SMM-狂神\MyBatis\mybatis基础\setting.jpg" alt="setting"></p><ul><li><p>logImpl</p></li><li><p>LOG4J      【掌握】</p></li><li><p>LOG4J2</p></li><li><p>JDK_LOGGING</p></li><li><p>STDOUT_LOGGING 【掌握】</p></li><li><p>在mybatis中配置日志</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6、Log4j"><a href="#6、Log4j" class="headerlink" title="6、Log4j"></a>6、Log4j</h2></li><li><p>什么是LOG4J？</p><ul><li>Log4j是<a href="https://baike.baidu.com/item/Apache/8512995">Apache</a>的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是<a href="https://baike.baidu.com/item/%E6%8E%A7%E5%88%B6%E5%8F%B0/2438626">控制台</a>、文件、<a href="https://baike.baidu.com/item/GUI">GUI</a>组件，甚至是套接口服务器、<a href="https://baike.baidu.com/item/NT/3443842">NT</a>的事件记录器、<a href="https://baike.baidu.com/item/UNIX">UNIX</a> <a href="https://baike.baidu.com/item/Syslog">Syslog</a><a href="https://baike.baidu.com/item/%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B/966835">守护进程</a>等；我们也可以控制每一条日志的输出格式；</li><li>通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。</li><li>最令人感兴趣的就是，这些可以通过一个<a href="https://baike.baidu.com/item/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/286550">配置文件</a>来灵活地进行配置，而不需要修改应用的代码</li></ul></li><li><p>LOG4J配置文件</p><pre><code>    properties    #将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码    log4j.rootLogger=DEBUG,console,file        #控制台输出的相关设置    log4j.appender.console = org.apache.log4j.ConsoleAppender    log4j.appender.console.Target = System.out    log4j.appender.console.Threshold=DEBUG    log4j.appender.console.layout = org.apache.log4j.PatternLayout    log4j.appender.console.layout.ConversionPattern=【%c】-%m%n        #文件输出的相关设置    log4j.appender.file = org.apache.log4j.RollingFileAppender    log4j.appender.file.File=./log/kuang.log    log4j.appender.file.MaxFileSize=10mb    log4j.appender.file.Threshold=DEBUG    log4j.appender.file.layout=org.apache.log4j.PatternLayout    log4j.appender.file.layout.ConversionPattern=【%p】【%d&#123;yy-MM-dd&#125;】【%c】%m%n        #日志输出级别    log4j.logger.org.mybatis=DEBUG    log4j.logger.java.sql=DEBUG    log4j.logger.java.sql.Statement=DEBUG    log4j.logger.java.sql.ResultSet=DEBUG    log4j.logger.java.sql.PreparedStatement=DEBUG</code></pre></li><li><p>配置log4j为日志的实现</p></li><li><p>xml</p><pre><code>       &lt;settings&gt;           &lt;setting name=&quot;logImpl&quot; value=&quot;LOG4J&quot;/&gt;       &lt;/settings&gt;</code></pre></li></ul><ul><li>LOG4J的使用,直接运行测试类<h1 id="7、分页"><a href="#7、分页" class="headerlink" title="7、分页"></a>7、分页</h1></li></ul><ol><li><p>为什么要分页?</p><ul><li>减少数据处理量</li></ul></li><li><p>使用Limit分页</p><pre><code> SELECT * FROM user LIMIT startIndex,pageCount</code></pre></li><li><p>使用mybatis实现分页</p><ul><li>使用 map传参实现LIMIT分页</li><li>使用sqlsession自带类实现分页<h1 id="8、mybatis中注解"><a href="#8、mybatis中注解" class="headerlink" title="8、mybatis中注解"></a>8、mybatis中注解</h1></li></ul></li><li><p>注解实现sql</p><ul><li>sql</li><li>多参数可以用@param(“”)在””里天上虚拟id</li><li>优点<ul><li>简化代码</li><li>sql简单可以使用此方法</li></ul></li><li>缺点<ul><li>对于resultMap不支持,将pojo类锁死</li><li>复杂查询不好用</li></ul></li></ul></li><li><p>lombok注解实现javaBean</p><ul><li>下载插件</li><li>pom里配置依赖</li></ul></li><li><p>关于#{}与${}</p><ol><li>#{}防止sql注入</li><li>${}不能很好防止sql注入<h1 id="9、一对多-多对一"><a href="#9、一对多-多对一" class="headerlink" title="9、一对多,多对一"></a>9、一对多,多对一</h1></li></ol></li><li><p>实例    </p><ol><li>学生与老师的对应关系,多个学生对应一个老师,一个老师对应多个学生</li><li>在写pojo时多对一的多端需要持有一个一端对象,表明多对一关系(对应java中的引用引用同一个对象)</li></ol></li><li><p>多对一</p></li><li><p>多对一将唯一一个JavaType写在多端</p><ol><li>嵌套查询,将结果处理丢给xml</li></ol>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--结果映射&gt;</span></span><br><span class="line"><span class="comment">&lt;resultMap id=&quot;studentMap&quot; type=&quot;Student&quot;&gt;</span></span><br><span class="line"><span class="comment">    &lt;association property=&quot;teacher&quot; column=&quot;tid&quot; javaType=&quot;Teacher&quot; select=&quot;selectTeacher&quot;/&gt;</span></span><br><span class="line"><span class="comment">&lt;/resultMap&gt;</span></span><br><span class="line"><span class="comment">&lt;!--主方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;studentMap&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM student;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用于关联的副方法&gt;</span></span><br><span class="line"><span class="comment">&lt;select id=&quot;selectTeacher&quot; resultType=&quot;Teacher&quot;&gt;</span></span><br><span class="line"><span class="comment">    SELECT * FROM teacher WHERE id = #&#123;tid&#125;</span></span><br><span class="line"><span class="comment">&lt;/select&gt;</span></span><br></pre></td></tr></table></figure>    2. 联合查询,结果处理均衡</li></ol><pre><code><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--结果映射&gt;</span></span><br><span class="line"><span class="comment">&lt;resultMap id=&quot;studentMap&quot; type=&quot;Student&quot;&gt;</span></span><br><span class="line"><span class="comment">    &lt;result property=&quot;name&quot; column=&quot;sname&quot;/&gt;</span></span><br><span class="line"><span class="comment">    &lt;result property=&quot;id&quot; column=&quot;sid&quot;/&gt;</span></span><br><span class="line"><span class="comment">    &lt;association property=&quot;teacher&quot; javaType=&quot;Teacher&quot;&gt;</span></span><br><span class="line"><span class="comment">    &lt;result property=&quot;id&quot; column=&quot;tid&quot;/&gt;</span></span><br><span class="line"><span class="comment">    &lt;result property=&quot;name&quot; column=&quot;tname&quot;/&gt;</span></span><br><span class="line"><span class="comment">    &lt;/association&gt;</span></span><br><span class="line"><span class="comment">&lt;/resultMap&gt;</span></span><br><span class="line"><span class="comment">&lt;!--主方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;studentMap&quot;</span>&gt;</span></span><br><span class="line">    SELECT s.id sid,s.name sname,t.id tid,t.name tname</span><br><span class="line">    FROM student s</span><br><span class="line">    JOIN teacher t</span><br><span class="line">    ON s.tid = t.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        </span><br></pre></td></tr></table></figure></code></pre><ol start="3"><li>一对多</li></ol><ol start="4"><li>理解:<ol><li>association实际上是将数据库中查到的数据封装进java类里.</li><li>collaction<h1 id="10、动态SQL"><a href="#10、动态SQL" class="headerlink" title="10、动态SQL"></a>10、动态SQL</h1><h2 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h2></li></ol></li></ol><h1 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h1><ol><li><p>什么是动态SQL?</p><ul><li>利用mavenresources和java平级可以在resources里建立dao的实现xml层,但是resources里面不能含有java源码</li></ul></li><li><p>环境搭建</p><pre><code> CREATE TABLE `blog`(     `id` VARCHAR(50) NOT NULL COMMENT &#39;博客id&#39;,     `title` VARCHAR(100) NOT NULL COMMENT &#39;博客标题&#39;,     `author` VARCHAR(30) NOT NULL COMMENT &#39;博客作者&#39;,     `create_time` DATETIME NOT NULL COMMENT &#39;创建时间&#39;,     `views` INT(30) NOT NULL COMMENT &#39;浏览量&#39; )ENGINE=INNODB DEFAULT CHARSET=utf8;</code></pre></li><li><p>动态sql:类jstl标签:<strong>本质就是SQL,只是可以在SQL层面执行一个逻辑代码</strong></p><ol><li>if<pre><code> &lt;select id=&quot;queryBlogIf&quot; parameterType=&quot;map&quot;&gt;     SELECT * FROM blog WHERE 1 = 1     &lt;if test=&quot;title != null&quot;&gt;         and title = #&#123;title&#125;     &lt;/if&gt;     &lt;if test=&quot;author != null&quot;&gt;         and author = #&#123;author&#125;     &lt;/if&gt; &lt;/select&gt;</code></pre></li><li>choose(switch),when,otherwise</li><li>Foreach</li><li>SQL片段:提高sql复用性<pre><code> &lt;sql id=&quot;if-title-author&quot;&gt; &lt;/sql&gt;  &lt;select ....     SELECT * FROM blog     &lt;where&gt;         **&lt;include refid=&quot;if-title-author&quot;&gt;&lt;/include&gt;**     &lt;/where&gt; /select&gt;</code></pre><ul><li>最好基于单表定义SQL片段</li></ul></li></ol><ul><li>where 标签,自动去除首部and,Or</li><li>set 标签,自动去除无关逗号</li><li>trim:定制化去掉</li></ul></li></ol><h1 id="11、缓存"><a href="#11、缓存" class="headerlink" title="11、缓存"></a>11、缓存</h1><h2 id="1、cache概念"><a href="#1、cache概念" class="headerlink" title="1、cache概念"></a>1、cache概念</h2><ul><li>应对高并发</li><li>缓存使用条件<ul><li>经常查询,不经常改变的数据<h2 id="2、-mybatis缓存分级"><a href="#2、-mybatis缓存分级" class="headerlink" title="2、 mybatis缓存分级"></a>2、 mybatis缓存分级</h2></li></ul></li><li>一级缓存<ul><li>自动开启</li><li>基于session</li></ul></li><li>二级缓存<ul><li>手动开启</li><li>基于namespace,一个mapper一个缓存</li><li>为了提高扩展性,mybatis设置了cache自定义,可以实现cache接口自定义二级缓存</li></ul></li><li>tips<ul><li>二级缓存只会在一级缓存结束后将缓存添加入二级缓存,一级缓存不死,二级缓存不会存在</li><li>关于xml中select,insert,update,delete语句的flushCache,useCache</li><li>当为select语句时：<ul><li>flushCache默认为false，表示任何时候语句被调用，都不会去清空本地缓存和二级缓存。</li><li>useCache默认为true，表示会将本条语句的结果进行二级缓存。</li></ul></li><li>当为insert、update、delete语句时：<ul><li>flushCache默认为true，表示任何时候语句被调用，都会导致本地缓存和二级缓存被清空。</li><li>useCache属性在该情况下没有。</li></ul></li><li>flushCache为true的时候，每次调用都清理缓存，这样等于你每次调用都要重新读数据库和写缓存，自然很慢；</li><li>flushCache为false的时候，每次调用不清缓存，除了第一次调用较慢，后面都会很快。</li><li>flushCache：如果设成true，当语句调用时一级二级缓存都会被清理掉。select语句默认是false</li><li>useCache：如果设成true，语句调用的结果会缓存在二级缓存里。select语句默认是true</li></ul></li></ul><pre><code>* 无论如何,一级缓存都会生效* 使用缓存,**需要将实体类序列化**,否则会报错</code></pre><h2 id="3、-缓存失效的情况"><a href="#3、-缓存失效的情况" class="headerlink" title="3、 缓存失效的情况:"></a>3、 缓存失效的情况:</h2><ol><li>查询不同的东西</li><li>增删改操作可能会改变原来的数据,必定会刷新缓存</li><li>不同mapper</li><li>手动刷新缓存<ol><li>sqlSession.clearCache() <h2 id="4、-查询顺序"><a href="#4、-查询顺序" class="headerlink" title="4、 查询顺序"></a>4、 查询顺序</h2></li></ol></li><li>查询到来时,先查询二级缓存</li><li>再查询一级缓存</li><li>最后查询数据库<h1 id="12、自定义缓存-ehcache"><a href="#12、自定义缓存-ehcache" class="headerlink" title="12、自定义缓存-ehcache"></a>12、自定义缓存-ehcache</h1></li><li>思想:实现了cache接口,可以自己定义cache接口使用复杂的策略</li><li>现在常用redis做缓存</li></ol><h1 id="附-mybaits执行流程"><a href="#附-mybaits执行流程" class="headerlink" title="附:mybaits执行流程"></a>附:mybaits执行流程</h1><p><img src="E:\资源\SMM-狂神\MyBatis\mybatis基础\mybatis执行流程.jpg" alt="mybatis执行流程"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> mybatis </tag>
            
            <tag> framwork </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax&amp;json</title>
      <link href="2021/05/15/ajax-json/"/>
      <url>2021/05/15/ajax-json/</url>
      
        <content type="html"><![CDATA[<h4 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h4><p>1.概念 ASynchronous JavaScript And XML 异步的JavaScript 和 XML<br>    1. 异步,同步:客户端和服务器通信的基础上<br>        1. 同步:客户端必须等待服务器的响应,在等待的期间客户端不能做其他操作<br>        2. 异步:客户端不需要等待服务器端的响应,在服务器处理请求的过程中,客户端可以进行其他操作<br>            * 客户端的各个元素之间异步,互不影响</p><pre><code>3. Ajax即Asynchronous Javascript And XML（异步JavaScript和XML）在 2005年被Jesse James Garrett提出的新术语，用来描述一种使用现有技术集合的‘新’方法，包括: HTML 或 XHTML, CSS, JavaScript, DOM, XML, XSLT, 以及最重要的XMLHttpRequest。 使用Ajax技术网页应用能够快速地将增量更新呈现在用户界面上，而不需要重载（刷新）整个页面，这使得程序能够更快地回应用户的操作。</code></pre><ol start="2"><li><p>实现方式</p><ol><li><p>原生的Js实现方式(了解)</p></li><li><p>JQuery实现方式</p><ol><li><p>$.ajax()</p><pre><code> $.ajax(&#123;   url:&quot;/Ajax/ajaxServlet&quot;,   type:&quot;post&quot;,   data:&#123;&quot;username&quot;:&quot;twen&quot;,&quot;age&quot;:&quot;23&quot;&#125;,   success:function (data)&#123;     alert(data);   &#125; &#125;);</code></pre><ul><li>success:function,error:function里的data为response里的响应内容</li></ul></li><li><p>$.get()</p><ul><li>用来发送get请求</li><li>语法:$.get(url,[data],[SuccessCallback],[type])</li><li>url:请求路径</li><li>请求参数</li><li>回调函数</li><li>响应数据类型</li><li>使用get不再需要写键名</li></ul></li><li><p>$.post()</p><ul><li>用来发送post请求</li><li>语法:$.post(url(必写),[data],[callback],[type]</li></ul></li></ol><ul><li>常用的键:<ul><li>url</li><li>type:”post”,”get”</li><li>data:发送的数据</li><li>success:function(data)</li><li>error:function(data)</li><li>dataType:获取的响应的格式(MIME类型)</li></ul></li></ul></li></ol></li></ol><h4 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h4><ol><li><p>概念:JavaScript Object Notation JavaScript对象表示法</p><pre><code> var p = (&quot;name&quot;:张三,&quot;age&quot;:23,&quot;gender&quot;:&quot;男);</code></pre><ul><li>JSON现多用于存储和交换文本信息的语法</li><li>进行数据的传输</li><li>JSON比XML更小,更快,更易解析</li></ul></li><li><p>语法:</p><ol><li><p>基本规则</p><ol><li>数据在名称键值对中:Json数据由键值对构成<ul><li>键用引号(单双都行)引起来,也可以不使用引号</li><li>值的取值类型:<ul><li>数字(正数或浮点型)</li><li>字符型(在双引号中)</li><li>逻辑值(true或false)</li><li>数值(在方括号中):{“person”:[{},{}]}</li><li>对象(在花括号中):{“address”:{“province”:”陕西”,….}}</li><li>null</li></ul></li></ul></li><li>数据由逗号分隔</li><li>花括号保存对象</li><li>方括号保存数组</li></ol></li><li><p><strong>获取数据</strong></p><ol><li><p>json对象.键名</p></li><li><p>json对象[“键名”]</p></li><li><p>数组对象[索引]</p></li><li><p><strong>对于Json对象和Json数组的遍历</strong></p><ol><li><p>对象<br> ** for中的key是字符串,所以不能用person.key获取数据</p><pre><code> for(key in person)&#123;      alert(person[key]);  &#125;</code></pre></li><li><p>键值对,数组对象的嵌套</p><pre><code> var persons =&#123; &quot;person&quot;:  [&#123;&quot;name&quot;: &quot;张三&quot;, age: 23, &quot;gender&quot;: true&#125;,       &#123;&quot;name&quot;: &quot;李四&quot;, age: 24, &quot;gender&quot;: false&#125;,       &#123;&quot;name&quot;: &quot;王五&quot;, age: 25, &quot;gender&quot;: true&#125;]   &#125;;      for (let i = 0; i &lt; persons.person.length; i++) &#123;   var person = persons.person[i];   for(key in person)&#123;       alert(person[key]);   &#125;   &#125;    </code></pre></li></ol></li></ol></li></ol></li><li><p>JSON数据和java对象的相互转换</p><ol><li><p>Json解析器</p><ul><li>常见的解析器:Jsonlib,Gson(Google提供),fastjson(阿里),jackson(Spring MVC框架内置)</li></ul></li><li><p>Json转为Java对象        </p><ol><li>redValue(json数据,Class)</li></ol></li><li><p>Java对象转换Json</p><ol><li><p>使用步骤</p><ol><li><p>导入jackson的相关jar包</p></li><li><p>创建Jackson核心对象ObjectMapper</p></li><li><p>调用ObjectMapper的相关方法</p><ol><li><p>转换方法</p><ul><li>writeValue(参数1,参数2)<ul><li>参数1<ul><li>file:将obj对象转换为JSON字符串,并保存到指定的文件中</li><li>Writer:将obj对象转换为Json字符串,并将json数据填充到字符输出流中</li><li>OutputStream:子节输出流</li></ul></li></ul></li><li>writeValueAsString(),传入对象将对象转换为Json字符串    </li></ul></li><li><p>注解:</p><ol><li>@JsonIgnore:排除属性</li><li>@JsonFormat:属性值的格式化(格式化与DateFormat要求一样)</li></ol></li><li><p>复杂的java对象转换</p><ol><li>list:数组</li><li>Map:和对象格式一致</li></ol></li></ol></li></ol></li></ol></li></ol></li></ol><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><ul><li>校验用户名是否存在</li><li>tips:$.get;$.post方法的返回值需要设置MIME类型(json),如果不设置,默认text纯文本类型。服务器也可以指定MIME类型application/jason/setContentType(;charset);</li></ul>]]></content>
      
      
      <categories>
          
          <category> front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
            <tag> json </tag>
            
            <tag> front-end </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jquery</title>
      <link href="2021/05/15/jQuery/"/>
      <url>2021/05/15/jQuery/</url>
      
        <content type="html"><![CDATA[<h4 id="JQuery基础"><a href="#JQuery基础" class="headerlink" title="JQuery基础"></a>JQuery基础</h4><ul><li><p>概念: 一个Javscript框架,能够简化javascript代码</p></li><li><p>本质: js文件,封装了js的原生代码</p></li><li><p>版本</p><ol><li>1.x:<ul><li>兼容ie,使用最广泛,官方只做BUG维护,功能不再新增。一般项目用1.x版本就可以</li><li>最终版本:1.12.4(2016/5/20)</li></ul></li><li>2.x:<ul><li>使用最少</li></ul></li><li>3.x:<ul><li>最新版本:新浏览器支持</li></ul></li><li>jquery-xxx.js 与 jquery-xxx.min.js区别<ol><li>jquery-xxx.js:开发版本,良好的缩进与注释,给程序员看</li><li>jquery-xxx.min.js:生产版本,程序中使用,没有缩进,体积小,程序加载更快<h4 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h4></li></ol></li></ol></li><li><p>步骤</p></li><li><p>导入Jquery文件,导入min.js文件</p></li><li><p>使用</p><pre><code>  var div1 = $(&quot;#div1&quot;);  alert(div1.html());</code></pre></li><li><p>优势</p><ul><li>jquery对象在操作时更加方便’</li><li>jquery对象和js对象不通用</li></ul></li><li><p>Jquery与js对象转换</p></li><li><p>jq – &gt; js:jsq对象[索引] 或者 jq对象.get(索引)(jq对象本质上是Object的数组)</p></li><li><p>js – &gt; jq:$(js对象)</p><pre><code>       let $div2 = $(&quot;div&quot;);       alert($div2.length)       $div2.html(&quot;bbb&quot;)            $div2[0].innerHTML = &quot;ccc&quot;;       $div2.get(1).innerHTML = &quot;ddd&quot;;</code></pre></li><li><p>选择器:筛选具有相似特征的元素(标签）</p><ol><li><p>基本语法学习</p><ol><li>事件绑定</li><li>入口函数<ol><li>js中的window.onload方法会被下一个函数覆盖</li><li>Jquery中的$(function())可以重复</li></ol></li><li>样式控制<ul><li>$(function(){$(“#div1”.css(“backgroundColour”,”pink”))})</li></ul></li></ol></li><li><p>分类</p><ol><li><p>基本选择器</p><ol><li>标签选择器（元素选择器）<ul><li>语法： $(“html标签名”) 获得所有匹配标签名称的元素</li></ul></li><li>id选择器 <ul><li>语法： $(“#id的属性值”) 获得与指定id属性值匹配的元素</li></ul></li><li>类选择器<ul><li>语法： $(“.class的属性值”) 获得与指定的class属性值匹配的元素</li></ul></li><li>并集选择器：<ul><li>语法： $(“选择器1,选择器2….”) 获取多个选择器选中的所有元素</li></ul></li></ol></li><li><p>层级选择器</p><ol><li>后代选择器<ul><li>语法: $(“A B”) 选择A元素内部的所有B元素(包括所有后辈)</li></ul></li><li>自带选择器<ul><li>语法: $(“A &gt; B”) 选择A元素内部的自带B元素</li></ul></li></ol></li><li><p>属性选择器</p><ol><li><p>属性名称选择器 </p><ul><li>语法： $(“A[属性名]”) 包含指定属性的选择器</li></ul></li><li><p>属性选择器</p><ul><li>语法： $(“A[属性名=’值’]”) 包含指定属性等于指定值的选择器</li></ul></li><li><p>复合属性选择器</p><ul><li>语法： $(“A[属性名=’值’][]…”) 包含多个属性条件的选择器</li></ul></li><li><p>属性选择器里的正则表达式</p><ol><li><p>开头</p><ul><li>$(“A[属性^=’ee’]”);</li></ul></li><li><p>结尾</p><ul><li>$(“A[属性$=’ee’]”);</li></ul></li><li><p>包含</p><ul><li>$(“A[属性*=’ee’]”);</li></ul><ol start="4"><li>过滤选择器</li></ol></li><li><p>首元素选择器 </p><ul><li>语法： :first 获得选择的元素中的第一个元素</li></ul></li><li><p>尾元素选择器 </p><ul><li>语法： :last 获得选择的元素中的最后一个元素</li></ul></li><li><p>非元素选择器</p><ul><li>语法： :not(selector) 不包括指定内容的元素</li></ul></li><li><p>偶数选择器</p><ul><li>语法： :even 偶数，从 0 开始计数</li></ul></li><li><p>奇数选择器</p><ul><li>语法： :odd 奇数，从 0 开始计数</li></ul></li><li><p>等于索引选择器</p><ul><li>语法： :eq(index) 指定索引元素</li></ul></li><li><p>大于索引选择器 </p><ul><li>语法： :gt(index) 大于指定索引元素,不等于</li></ul></li><li><p>小于索引选择器 </p><ul><li>语法： :lt(index) 小于指定索引元素,不等于</li></ul></li><li><p>标题选择器</p><ul><li>语法： :header 获得标题（h1~h6）元素，固定写法</li></ul></li></ol></li><li><p>表单过滤选择器</p><ol><li>可用元素选择器 <ul><li>语法： :enabled 获得可用元素</li></ul></li><li>不可用元素选择器 <ul><li>语法： :disabled 获得不可用元素</li></ul></li><li>选中选择器 <ul><li>语法： :checked 获得单选/复选框选中的元素</li></ul></li><li>选中选择器 <ul><li>语法： :selected 获得下拉框选中的元素</li></ul></li></ol></li></ol></li></ol></li></ol></li></ul><h4 id="DOM操作"><a href="#DOM操作" class="headerlink" title="DOM操作"></a>DOM操作</h4><ol><li><p>内容操作</p><ol><li><p>html(): 获取/设置元素的标签体内容</p><pre><code> &lt;a&gt;&lt;font&gt;内容&lt;/font&gt;&lt;/a&gt;  --&gt; &lt;font&gt;内容&lt;/font&gt;</code></pre></li><li><p>text(): 获取/设置元素的题纯文本内容,设置text内容时会换掉其所在的标题标签</p><pre><code> 获取/设置元素的标签体纯文本内容   &lt;a&gt;&lt;font&gt;内容&lt;/font&gt;&lt;/a&gt; --&gt; 内容</code></pre></li><li><p>val(): 获取/设置元素的value属性值</p></li></ol></li><li><p>属性操作</p><ol><li><p>通用属性操作</p><ol><li>attr(): 获取/设置元素的属性</li><li>removeAttr(): 删除属性</li><li>prop(): 获取/设置元素的属性</li><li>removeProp(): 删除属性</li></ol><ul><li>attr和prop区别<ol><li>如果操作的是元素的固有属性,建议使用prop</li><li>如果操作的是自定义属性,建议使用attr</li></ol></li></ul></li><li><p>对class属性的操作</p><ol><li>addClass():添加class属性值</li><li>removerClass():删除class属性值</li><li>toggleClass():切换class属性值<ul><li>如果元素对象有class则删除,如果不存在则添加</li></ul></li><li>css():获取/设置css样式</li></ol></li></ol></li><li><p>CRUD操作</p><ol><li>添加<ol><li>父级元素的添加<ol><li>append():父元素将子元素追加到末尾<ul><li>对象1.append(对象2):将对象2添加到对象1元素内部,并且在末尾</li></ul></li><li>prepend():父元素将子元素追加到开头<ul><li>对象1.prepend(对象2):将对象2添加到对象1元素内部,并且在开头</li></ul></li><li>appentTO():括号里追加调用方法者在末尾<ul><li>对象1.appendTo(对象2):将对象1添加到对象2内部,并且在末尾</li></ul></li><li>prepentTo():括号里追加调用方法者在开头<ul><li>对象1.appendTo(对象2):将对象1添加到对象2内部,并且在开头</li></ul></li></ol></li><li>兄弟元素的添加<ol><li>after():将元素添加到元素后面<ul><li>对象1.after(对象2):将对象2添加到对象1后,为兄弟关系</li></ul></li><li>before():将元素添加到元素前边<ul><li>对象1.before(对象2):将对象2添加到对象1后,为兄弟关系</li></ul></li><li>insertAfter():插队</li><li>insertBefore():插队</li></ol></li></ol></li><li>移除<ol><li>remove():移除元素<ul><li>对象.remove():将此对象删除</li></ul></li><li>empty():清空元素的所有后代元素<ul><li>对象.empty():将此元素的所有子节点删除,但保留该节点和属性</li></ul></li></ol></li></ol></li></ol><h4 id="this"><a href="#this" class="headerlink" title="this"></a>this</h4><ul><li>this是dom对象不是jQuery对象,需要$(this)才能调用this的Jquery对象</li></ul><h4 id="Jquery高级"><a href="#Jquery高级" class="headerlink" title="Jquery高级"></a>Jquery高级</h4><ol><li><p>动画</p><ol><li><p>三种方式显示和隐藏元素</p><ol><li><p>默认显示和隐藏方式</p><ol><li>show([speed,[easing],[fn]])<ol><li>参数：<ol><li>speed：动画的速度。三个预定义的值(“slow”,”normal”, “fast”)或表示动画时长的毫秒数值(如：1000)</li><li>easing：用来指定切换效果，默认是”swing”，可用参数”linear”<ul><li>swing：动画执行时效果是 先慢，中间快，最后又慢</li><li>linear：动画执行时速度是匀速的</li></ul></li><li>fn：在动画完成时执行的函数，每个元素执行一次。</li></ol></li></ol></li><li>hide([speed,[easing],[fn]])</li><li>toggle([speed],[easing],[fn])</li></ol></li><li><p>滑动显示和隐藏方式</p><ol><li>slideDown([speed],[easing],[fn])</li><li>slideUp([speed,[easing],[fn]])</li><li>slideToggle([speed],[easing],[fn])</li></ol></li><li><p>淡入淡出显示和隐藏方式</p><ol><li>fadeIn([speed],[easing],[fn])</li><li>fadeOut([speed],[easing],[fn])</li><li>fadeToggle([speed,[easing],[fn]])</li></ol></li></ol></li></ol></li><li><p>遍历</p><ol><li>js的遍历方式</li></ol><ul><li>for(初始化值;循环结束条件;步长)</li></ul><ol start="2"><li><p>jq的遍历方式</p><ol><li>jq对象.each(callback)<ol><li>语法：<br> jquery对象.each(function(index,element){});<pre><code> * index:就是元素在集合中的索引 * element：就是集合中的每一个元素对象 * this：集合中的每一个元素对象 * function中的index,element固定位置,但是可以省略</code></pre></li><li>回调函数返回值：<ul><li>true:如果当前function返回为false，则结束循环(break)。</li><li>false:如果当前function返回为true，则结束本次循环，继续下次循环(continue)</li></ul></li></ol></li><li>$.each(object, [callback]):可以传递js数组对象,不仅jq对象</li><li>for..of: jquery 3.0 版本之后提供的方式<br> for(元素对象 of 容器对象)</li><li>tips:如果callback()函数里有返回false,则相当于break,如果是true,则相当于continue</li></ol></li><li><p>事件绑定</p><ol><li>jQuery标准的绑定方式<ul><li>jq对象.事件方法(回调函数);</li><li>tips:如果调用事件方法,不传递回调函数,则会出发浏览器默认行为。<ul><li>对象.submit,提交表单</li><li>对象.focus(如果没有回调函数,默认设置焦点)</li></ul></li></ul></li><li>on绑定事件/off解绑事件<ul><li>jq对象.on(“事件名称”,回调函数);</li><li>jq对象.off(“事件名称”);</li><li>tips:如果off不传入任何参数,则会默认解绑所有事件</li></ul></li><li>事件切换:toggle<ul><li>jq对象.toggle(fn1,fn2);<ul><li>点击会依次循环切换执行函数。</li><li>jQuery1.9取消此功能,导入jQuery-migrate.js可以执行</li></ul></li></ul></li></ol></li><li><p>插件:增强JQuery的功能</p><ol><li>实现方式:<ol><li>$.fn.extend(object)<ul><li>增强通过Jquery获取的对象的功能 $(“#id”)</li></ul></li><li>$.extend(object)<ul><li>增强Jquery对象自身的功能 $/jQuery</li><li>调用方式$.插件名</li></ul></li></ol></li></ol></li></ol></li></ol><h4 id="案例"><a href="#案例" class="headerlink" title="案例:"></a>案例:</h4><ul><li>需求:<ol><li>提供index.html页面,页面中有一个省份 下拉列表</li><li>当页面加载完成后 发送ajax请求,请求json省份信息</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> front-end </tag>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdbc中的crud操作</title>
      <link href="2021/04/28/jdbc%E4%B8%AD%E7%9A%84Crud/"/>
      <url>2021/04/28/jdbc%E4%B8%AD%E7%9A%84Crud/</url>
      
        <content type="html"><![CDATA[<h3 id="PreparedStatement"><a href="#PreparedStatement" class="headerlink" title="PreparedStatement"></a>PreparedStatement</h3><ul><li>预编译的SQL语句</li></ul><h3 id="SQL中的CRUD"><a href="#SQL中的CRUD" class="headerlink" title="SQL中的CRUD"></a>SQL中的CRUD</h3><ul><li><p>总的流程</p><ol><li>获取数据库连接</li><li>预编译sql语句,返回PreparedStatement实例</li><li>填充占位符</li><li>执行</li><li>关闭资源</li></ol></li><li><p>小技巧</p><ol><li>占位符:?<ul><li>将自己想要改变的参数填上占位符</li><li>表不能用占位符</li></ul></li><li>将获得连接与关闭流写在一个工具类里面</li></ol></li><li><p>INSERT</p><pre><code>    //预编译sql语句,返回PreparedStatement实例  String sql = &quot;INSERT INTO customers(name,email,birth) VALUES (?,?,?)&quot;;//?:占位符  pr = connection.prepareStatement(sql);  //填充占位符,数据索引从1开始  pr.setString(1,&quot;哪吒&quot;);  pr.setString(2,&quot;nezha@gmail.com&quot;);  SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);  java.util.Date date = sdf.parse(&quot;1001-01-01&quot;);  pr.setDate(3,new Date(date.getTime()));  //执行操作  pr.execute();</code></pre></li><li><p>UPDATE</p><pre><code>  //1.获取数据库连接  Connection connection = JDBCUtils.getConnection();  //2.预编译sql语句,返回PreparedStatement的实例  String sql = &quot;UPDATE customers SET name = ? WHERE id = ?&quot;;  //预编译SQL语句  PreparedStatement ps = connection.prepareStatement(sql);  //3.填充占位符  ps.setObject(1,&quot;莫扎特&quot;);  ps.setObject(2,18);  //4.执行  ps.execute();  //5.资源的关闭  JDBCUtils.closeResource(connection,ps);</code></pre></li><li><p>通用的增删改操作</p><pre><code>  Connection connection = null;  PreparedStatement ps = null;  try &#123;      //1.获取连接      connection = JDBCUtils.getConnection();      //2.获取PreparedStatement类      ps = connection.prepareStatement(sql);      //3.填充占位符      for (int i = 0; i &lt; objects.length; i++) &#123;          ps.setObject(i + 1, objects[i]);      &#125;      //4.执行      ps.execute();      //5.关闭流  &#125; catch (Exception e)&#123;      JDBCUtils.closeResource(connection, ps);  &#125;</code></pre></li><li><p>SELECT</p><ul><li><p>针对单个表的查询的固定查询</p><pre><code>  Connection connection = null;  PreparedStatement ps = null;  ResultSet resultSet = null;  try &#123;      //1.获取数据库连接      connection = JDBCUtils.getConnection();      //2.预编译SQL      ps = connection.prepareStatement(sql);      //3.填充占位符      for (int i = 0; i &lt; objects.length; i++) &#123;          ps.setObject(i + 1, objects[i]);      &#125;      //4.获取结果Set      resultSet = ps.executeQuery();      //5.打印结果      while (resultSet.next()) &#123;          int id = resultSet.getInt(1);          String name = resultSet.getString(2);          String email = resultSet.getString(3);          java.sql.Date date = resultSet.getDate(4);          Customers customers = new Customers(id, name, email, date);          System.out.println(customers);      &#125;  &#125;catch (Exception e)&#123;      e.printStackTrace();  &#125;finally &#123;      //6.关闭流      JDBCUtils.closeResource(connection,ps,resultSet);  &#125;</code></pre></li><li><p>针对单个表的通用查询:</p><ul><li>需要获取ResultSetMetaDate()来获取列长度,列名</li><li>如果有order_id等字段与java属性不符,需要将查询出来的字段label改为java属性名<pre><code>  List&lt;Customers&gt; list = new ArrayList&lt;&gt;();  Connection connection = null;  PreparedStatement ps = null;  ResultSet rs = null;  try &#123;      //1.获取sql连接      connection = JDBCUtils.getConnection();      //2.执行sql预编译      ps = connection.prepareStatement(sql);      //3.编译sql      for (int i = 0; i &lt; objects.length; i++) &#123;          ps.setObject(i + 1, objects[i]);      &#125;      //4.1获得结果集合      rs = ps.executeQuery();      //4.2获得结果元集合      ResultSetMetaData rsmd = rs.getMetaData();      //4.3得到列的长度      int colCounts = rsmd.getColumnCount();      //4.4循环添加对象      while (rs.next()) &#123;          //创建Customer对象          Customers cus = new Customers();          for (int i = 0; i &lt; colCounts; i++) &#123;              //得到每一列的值              Object val = rs.getObject(i + 1);              //得到每一列的名字              String colName = rsmd.getColumnLabel(i + 1);              //根据列名和值通过反射设置              Field field = Customers.class.getDeclaredField(colName);              field.setAccessible(true);              field.set(cus, val);          &#125;          //将设置好的cus对象存入队列          list.add(cus);      &#125;  &#125;catch (Exception e)&#123;      e.printStackTrace();  &#125;finally &#123;      JDBCUtils.closeResource(connection,ps,rs);  &#125;  return list;</code></pre></li></ul></li><li><p>针对多个表的通用查询&lt;运用泛型&gt;</p><pre><code>  List&lt;T&gt; list = new ArrayList&lt;&gt;();  Connection connection = null;  PreparedStatement ps = null;  ResultSet rs = null;  try &#123;      //1.建立连接     connection = JDBCUtils.getConnection();      //2.获取PreparedStatement      ps = connection.prepareStatement(sql);      //3.填充占位符      for (int i = 0; i &lt; objects.length; i++) &#123;          ps.setObject(i+1,objects[i]);      &#125;      //4结果处理      //4.1获取结果集      rs = ps.executeQuery();      //4.2获取结果元组      ResultSetMetaData rsmd = rs.getMetaData();      //4.3获取列的长度      int colCounts = rsmd.getColumnCount();      //4.4循环进行操作      while(rs.next())&#123;          T t = clazz.getDeclaredConstructor().newInstance();          for (int i = 0; i &lt; colCounts; i++) &#123;              //获取每一列的val              Object val = rs.getObject(i+1);              //反射设置每一列的值              String colName = rsmd.getColumnLabel(i+1);              Field field = clazz.getDeclaredField(colName);              field.setAccessible(true);              field.set(t,val);          &#125;          list.add(t);      &#125;  &#125;catch (Exception e)&#123;      e.printStackTrace();  &#125;finally &#123;      JDBCUtils.closeResource(connection,ps,rs);  &#125;  return list;</code></pre><p>  }</p><h4 id="PreparedStatement好处"><a href="#PreparedStatement好处" class="headerlink" title="PreparedStatement好处"></a>PreparedStatement好处</h4></li></ul></li><li><p>解决Statement拼串问题</p></li><li><p>解决sql注入问题,预编译之后数据的关系不会改变</p></li><li><p>PreparedStatement可以操作Blob数据,而Statement做不到</p></li><li><p>PreparedStatement可以更高效实现批量操作</p><ul><li>预编译只需要对sql语句校验一次</li><li>Statement每一次sql语句都需要校验</li><li>提高效率方式1:可以使用batch减少与磁盘的io次数,但是Mysql默认不支持Batch操作,需要我们在url中添加参数rewriteBatchedStatements=true(8.0以后mysql默认支持batch)</li><li>提高效率方式2:在获取连接时设置不允许自动提交数据,在结束后再提交</li><li>关键语句:addBatch(),ExecuteBatch(),clearBatch,setAutoCommit(),commit()<pre><code>  public void testAbandont()&#123;      Connection connection = null;      PreparedStatement ps = null;      long start = System.currentTimeMillis();      try &#123;          connection = JDBCUtils.getConnection();          connection.setAutoCommit(false);          ps = connection.prepareStatement(&quot;INSERT INTO test1(name) VALUES(?)&quot;);          for (int i = 0; i &lt; 200000; i++) &#123;              ps.setObject(1,&quot;tom&quot;+i);              ps.addBatch();              if(i%500 == 0||i==200000)&#123;                  ps.executeBatch();                  ps.clearBatch();              &#125;          &#125;          connection.commit();          System.out.println(System.currentTimeMillis()-start);      &#125;catch (Exception e)&#123;          e.printStackTrace();      &#125;finally &#123;          JDBCUtils.closeResource(connection,ps);      &#125;</code></pre></li></ul></li></ul><h4 id="实现通用查询的方法"><a href="#实现通用查询的方法" class="headerlink" title="实现通用查询的方法"></a>实现通用查询的方法</h4><ul><li>反射<ul><li>设置属性</li></ul></li><li>泛型<ul><li>针对不同对象</li></ul></li></ul><h4 id="BLOB类"><a href="#BLOB类" class="headerlink" title="BLOB类"></a>BLOB类</h4><ul><li><p>blob的类型</p><ul><li>TINYBLOB 1B</li><li>BLOB 64KB</li><li>MEDIUMBLOB 16MB</li><li>LONGBLOB 4GB</li></ul></li><li><p>tips</p><ul><li>相对路径的根路径是proj项目文件不是src</li><li>如果引入Blob文件大于mysql配置文件的限定大小,会出现Date too long异常,设置max_allowd_packet=16M</li></ul></li><li><p>添加到数据库</p><pre><code>  InputStream is = new InputStream(url)  ps.setBlob(index,is)</code></pre></li><li><p>从数据库读取Blob类型并下载至本地</p><pre><code>  Blob b = resultSet.getBlob(lable)  //获取流  InputStream is = b.getBinaryStream();  //设置输出流  FileOutputStream fos = new FileOutputStream(url);  //读取输入流设置缓存  byte[] buffer = new byte[1024]  int len = 0  //利用缓存区读取          while((len = is.read(buffer))!=0)&#123;      fos.write(buffer,0,len);  &#125;</code></pre></li><li><p>Blob类型的插入</p><ul><li>Blob类型的插入需要用到setBlob方法(index,inputStream)</li><li>其中inputStream指向需要插入文件 <pre><code>  public void insertBlob()&#123;  Connection connection = null;  PreparedStatement ps = null;  InputStream is = null;  try &#123;      //建立连接      connection = JDBCUtils.getConnection();      //预编译sql      String sql = &quot;INSERT INTO customers VALUES(?,?,?,?,?)&quot;;      ps = connection.prepareStatement(sql);      //填充占位符      ps.setObject(1,&quot;24&quot;);      ps.setObject(2,&quot;刘亦菲&quot;);      ps.setObject(3,&quot;yifei@gmail.com&quot;);      ps.setObject(4,&quot;1990-02-06&quot;);      //获取读入流      is = new FileInputStream(&quot;src//liuyifei1.png&quot;);      ps.setBlob(5,is);      //执行      ps.execute();  &#125;catch (Exception e)&#123;      e.printStackTrace();  &#125;finally &#123;      JDBCUtils.closeResource(connection,ps);      try&#123;          if(is != null) is.close();      &#125;catch (Exception e)&#123;          e.printStackTrace();      &#125;  &#125;  </code></pre></li></ul></li></ul><ul><li><p>Blob类型的读取</p><ul><li><p>Blob类型的读取需要用java的java.sql.Blob类型接取</p></li><li><p>Blob类型有一个方法得到其二进制输入流Blob.inputBinaryStream</p><p>  Connection connection = null;<br>  PreparedStatement ps = null;<br>  InputStream is = null;<br>  OutputStream os = null;<br>  ResultSet rs = null;<br>  try {</p><pre><code>  //建立连接  connection = JDBCUtils.getConnection();  //查询  String sql = &quot;SELECT id,name,email,birth,photo FROM customers WHERE id = ?&quot;;  ps = connection.prepareStatement(sql);  ps.setObject(1,20);  rs = ps.executeQuery();  if(rs.next()) &#123;      Customers cus = new Customers();      cus.setId(rs.getInt(&quot;id&quot;));      cus.setBirth(rs.getDate(&quot;birth&quot;));      cus.setEmail(rs.getString(&quot;email&quot;));      cus.setName(rs.getString(&quot;name&quot;));      //获取blob      Blob blob = rs.getBlob(&quot;photo&quot;);      //获取输入流      is = blob.getBinaryStream();      //设置输出流      os = new FileOutputStream(&quot;output.png&quot;);      byte[] buffer = new byte[1024];      int len = 0;      while((len = is.read(buffer)) != -1)&#123;          os.write(buffer,0,len);      &#125;  &#125;</code></pre><p>  }catch (Exception e){</p><pre><code>  e.printStackTrace();</code></pre><p>  }finally {</p><pre><code>  JDBCUtils.closeResource(connection,ps,rs);  try&#123;      if(os != null) os.close();  &#125;catch (Exception e)&#123;      e.printStackTrace();  &#125;  try&#123;      if(is != null) is.close();  &#125;catch (Exception e)&#123;      e.printStackTrace();  &#125;</code></pre><p>  }</p></li></ul></li></ul><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><ol><li><p>插入操作</p><ul><li>mysqldate隐式转换”yyyy-MM-dd”;</li><li>ps.execute()<ul><li>查询操作,有返回结果,则此方法返回true</li><li>如果时曾删改没有返回结果,返回false</li></ul></li><li>ps.executeUpdate()<ul><li>返回值是影响的行数</li></ul></li></ul></li><li><ol><li>创立数据库表examStudent,表结构如下<ul><li>FlowID 流水号 int(10)</li><li>Type 四级/六级 int(5)</li><li>IDCard 身份证号码 varchar(18)</li><li>ExamCard 准考证号码 varchar(15)</li><li>StudentName 学生姓名 varchar(20)</li><li>Location 区域 varchar(20)</li><li>Grade 成绩 int(10)</li></ul></li><li>向表中添加数据</li></ol></li></ol><h4 id="PreparedStatement与Statement区别"><a href="#PreparedStatement与Statement区别" class="headerlink" title="PreparedStatement与Statement区别"></a>PreparedStatement与Statement区别</h4><ul><li>都是Sun公司提供的</li><li>Pre是Statement的子接口</li><li>PreparedStatement可以防止SQL注入</li><li>PreparedStatement可以最大程度提高性能</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdbc_crud </tag>
            
            <tag> jdbc_preparedStatment </tag>
            
            <tag> java_reflect </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC获取数据库连接</title>
      <link href="2021/04/28/jdbc%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5/"/>
      <url>2021/04/28/jdbc%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<h3 id="获取数据库连接"><a href="#获取数据库连接" class="headerlink" title="获取数据库连接"></a>获取数据库连接</h3><ol><li>Driver接口实现类:驱动<ul><li>mysql 8.0驱动 com.mysql.cj.jdbc.Driver</li><li>加载与注册JDBC驱动<ul><li>加载驱动:加载JDBC驱动需调用Class类的静态方法forName(),向其传递要加载的JDBC驱动的类名<ul><li>Class.forName(“com.mysql.cj.jdbc.Driver”) /* 反射 */</li></ul></li><li>注册驱动:DreiverManager类是驱动程序管理器类,负责管理驱动程序<ul><li>使用DriverManage.registerDriver(com.mysql.cj.jdbc.Driver)注册驱动</li><li>通常不显示调用DriverManager类的registerDriver方法来注册驱动程序类的实例?</li></ul></li></ul></li><li>数据库厂商根据jdk的Driver接口编写Driver的实现类</li></ul></li></ol><p>2 URL</p><ul><li><p>JDBC URL用于标识一个被注册的驱动程序,驱动程序管理器通过这个URL选择正确的驱动程序,从而建立到数据库的连接</p></li><li><p>JDBC URl的标准由三部分组成,各部分间用冒号分隔</p><ul><li>jdbc:子协议:子名称</li><li>协议:JDBC URL中的协议总是jdbc</li><li>子协议:子协议用于标识一个数据库驱动程序</li><li>子名称:一种标识数据库的方法。子名称额可以依不同的子协议而变化,用子名称的目的是为了定位数据库提供足够的信息。包括<strong>主机名</strong>(对应的服务端的ip地址),<strong>端口号</strong>,<strong>数据库名</strong><ul><li>举例</li><li>jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone = GMT</li><li>在 mysql 8.0应该这样写,加上时区</li></ul></li></ul></li><li><p>几种常用的数据库的jdbc url</p><ul><li>mysql连接URL编写的方法<ul><li>jdbc:mysql://主机名称:mysql服务端口号/数据库名称?参数=值&amp;参数=值</li><li>jdbc:mysql://localhost:3306/test</li><li>jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf8(如果jdbc程序与服务器段的字符集不一致,会导致乱码,那么可以通过参数指定服务器端的字符集)</li><li>jdbc:mysql://localhost:3306/test?user=root&amp;password=123456</li></ul></li><li>Oracle 9i的连接URL编写方式：<ul><li>jdbc:oracle:thin:@主机名称:oracle服务端口号:数据库名称</li><li>jdbc:oracle:thin:@localhost:1521:atguigu</li></ul></li><li>SQLServer的连接URL编写方式：<ul><li>jdbc:sqlserver://主机名称:sqlserver服务端口号:DatabaseName=数据库名称</li><li>jdbc:sqlserver://localhost:1433:DatabaseName=atguigu</li></ul></li></ul></li></ul><ol start="3"><li><p>用户名和密码</p><ul><li>user,password可以用”属性名=属性值”方式告诉数据库</li><li>可以调用DriverManager类的getConnection()方法建立到数据库的连接 <h3 id="获取数据库连接的方法"><a href="#获取数据库连接的方法" class="headerlink" title="获取数据库连接的方法"></a>获取数据库连接的方法</h3></li></ul></li><li><p>连接的方式1(出现了第三方API)</p><pre><code> //方式一    Driver driver = new com.mysql.cj.jdbc.Driver();    String url = &quot;jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone = GMT&quot;;    //将用户名和秘密码封装在Properties中    Properties info = new Properties();    info.setProperty(&quot;user&quot;, &quot;root&quot;);    info.setProperty(&quot;password&quot;, &quot;123456&quot;);    Connection connection = driver.connect(url,info);    System.out.println(connection);</code></pre></li><li><p>连接的方式2(利用反射实现Dynamic动态性,使程序具有更好的可移植性)</p><pre><code>     //方式二     //1.根据反射获取Driver的mysql接口子类实现类     Class clazz = Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);     Driver driver = (Driver) clazz.getDeclaredConstructor().newInstance();     //2.提供要连接的数据库     String url =&quot;jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone = GMT&quot;;     //3.提供连接需要的用户名和密码     Properties info = new Properties();     info.setProperty(&quot;user&quot;, &quot;root&quot;);     info.setProperty(&quot;password&quot;, &quot;123456&quot;);     //4.获取连接     Connection connection = driver.connect(url,info);     System.out.println(connection);</code></pre></li><li><p>连接的方式3(利用DriverManager实现的管理Driver)</p><pre><code> //方式三 利用DriverManager类而不用Driver获取连接,需要注册驱动 //1.根据反射获取Driver的mysql接口子类实现类 Class clazz = Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;); Driver driver = (Driver) clazz.getDeclaredConstructor().newInstance(); //2.提供另外三个连接的基本信息 String url = &quot;jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone = GMT&quot;; String user = &quot;root&quot;; String password = &quot;123456&quot;; //注册驱动 DriverManager.registerDriver(driver); //获取连接 Connection connection = DriverManager.getConnection(url,user,password); System.out.println(connection);</code></pre></li><li><p>连接方式4(优化获取Driver实现类的对象)</p><pre><code> //方式四 优化方式三 优化获取Driver实现类的对象 // ※可以省略创建Driver对象,注册driver的操作mysql的Driver实现类中在类加载时注册了driver实现类 //1.加载mysql的Driver Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;); //Driver driver = (Driver) clazz.getDeclaredConstructor().newInstance(); //2.提供另外三个连接的基本信息 String url = &quot;jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone = GMT&quot;; String user = &quot;root&quot;; String password = &quot;123456&quot;; //获取连接 Connection connection = DriverManager.getConnection(url,user,password); System.out.println(connection); </code></pre></li><li><p>连接方式5(最终版,将数据库的驱动与程序解耦写入配置文件)</p><pre><code> //方式五 将数据与程序结构,写入配置文件 //得到properties文件 InputStream is = ConnectionTest.class.getClassLoader().getResourceAsStream(&quot;mysql.properties&quot;); Properties initial = new Properties(); initial.load(is); String driver = initial.getProperty(&quot;driver&quot;); String url = initial.getProperty(&quot;url&quot;); String user = initial.getProperty(&quot;user&quot;); String password = initial.getProperty(&quot;password&quot;); //加载驱动 Class.forName(driver); //获得连接 Connection connection = DriverManager.getConnection(url,user,password); System.out.println(connection);</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdbc_connection </tag>
            
            <tag> java_sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL中的变量</title>
      <link href="2021/04/24/MYSQL%E4%B8%AD%E7%9A%84%E5%8F%98%E9%87%8F/"/>
      <url>2021/04/24/MYSQL%E4%B8%AD%E7%9A%84%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><ul><li>分类<ul><li>系统变量<ul><li>全局变量</li><li>会话变量</li></ul></li><li>自定义变量<ul><li>用户变量</li><li>局部变量</li></ul></li></ul></li></ul><h4 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h4><ul><li><p>说明:变量由系统提供,不是用户定义,属于服务器层面</p></li><li><p>语法:</p><ol><li><p>查看所有的系统变量</p><pre><code> SHOW (GLOBAL 全局,SESSION 会话)VARIABLES;</code></pre></li><li><p>查看满足条件的部分系统变量</p><pre><code> SHOW GLOBAL|SESSION VARIABLES LIKE &#39;%char%&#39;;</code></pre></li><li><p>查看指定的某个系统变量的值</p><pre><code> SELECT @@global|session.系统变量名;</code></pre></li><li><p>为某个系统变量赋值<br> 方式1:</p><pre><code>     SET GLOBAL|SESSION 系统变量名 = 值;</code></pre><p> 方式2:</p><pre><code>     SET @@GLOBAL|SESSION.系统变量名 = 值;</code></pre></li></ol></li><li><p>注意</p><ul><li>如果时全局级别,则需要加global</li><li>如果时会话级别,默认或session<h4 id="系统变量-1"><a href="#系统变量-1" class="headerlink" title="系统变量"></a>系统变量</h4></li></ul></li></ul><ol><li>全局变量<pre><code> * 跨连接有效 * 作用域:服务器每次启动将为所有的全局变量赋初始值,针对于所有的会话(连接),但是不能跨重启 * 如果需求每次重启服务器都为自己预想的变量,则需要修改配置文件</code></pre><ol><li>查看所有的全局变量<pre><code> SHOW GLOBAL VARIABLES;</code></pre></li><li>查看部分的全局变量<pre><code> SHOW GLOBAL VARIABLES LIKE &#39;%char%&#39;;</code></pre></li><li>查看指定的全局变量的值<pre><code> SELECT @@global.autocommit; SELECT @@TRANSACTION_ISOLATION;</code></pre></li><li>为某个指定的全局变量赋值<pre><code> SET global autocommit = 0; SET @@global.autocommit = 0;</code></pre></li></ol></li><li>会话变量<pre><code> * 仅仅针对于当前会话(连接)有效 </code></pre><ol><li>查看所有的会话变量<pre><code> SHOW [SESSION] VARIABLES</code></pre></li><li>查看部分的会话变量<pre><code> SHOW [SESSION] VARIABLES LIKE&#39; &#39;</code></pre></li><li>查看指定的全局变量的值<pre><code> SELECT @@SESSION.autocommit; SELECT @@TRANSACTOIN_ISOLATION; </code></pre></li><li>为某个会话变量赋值<ol><li>方式一<pre><code> SET @@TRANSACIONT = &#39;read-uncommitted&#39;;</code></pre></li><li>方式二<pre><code> SET SESSION TRANSACTION_ISOLATION = &#39;read_committed&#39;; </code></pre><h4 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a>自定义变量</h4></li></ol></li></ol><ul><li>变量由用户自定义的,不是由系统定义的</li><li>使用步骤:<pre><code>      声明      赋值      使用(查看、比较、运算等)</code></pre></li></ul></li><li>用户变量<ul><li>作用域<ul><li>针对于当前会话(连接)连接有效,等同关于会话变量的作用域</li><li>应用在任何地方,也就是begin end里面或begin end外面    </li></ul></li><li>使用:用户变量使用时需要加@<pre><code>  1. 声明并初始化:赋值的操作符: = 或 :=      SET @用户变量名 = 值;      SET @用户变量名:= 值;      SELECT @用户变量名:=值;  2. 赋值(更新用户变量的值)      方式一:通过SET 或 SELECT          SET @用户变量名=值          SET @用户变量名:=值          SELECT @用户变量名:=值      方式二:通过SELECT INTO          SELECT 字段 INTO @变量名          FROM 表;    </code></pre></li></ul></li><li>局部变量<ul><li>作用域<ul><li>仅仅在定义它的begin end 中有效</li><li>begin end中的第一句话</li></ul></li><li>使用</li></ul></li></ol><pre><code>        1. 声明            DECLARE 变量名 类型;            DECLARE 变量名 类型 DEFAULT 值;        2. 赋值            方式一:通过SET 或 SELECT                SET 局部变量名=值                SET 局部变量名:=值                SELECT @局部变量名:=值            方式二:通过SELECT INTO                SELECT 字段 INTO 局部变量名                FROM 表;            3. 使用            SELECT 局部变量名</code></pre><h4 id="用户变量与局部变量对比"><a href="#用户变量与局部变量对比" class="headerlink" title="用户变量与局部变量对比"></a>用户变量与局部变量对比</h4><ul><li>作用域<ul><li>用户变量针对当前会话</li><li>局部变量针对BEGIN END中</li></ul></li><li>定义和使用位置<ul><li>用户变量会话中的任何地方</li><li>局部变量只能在BEGIN END中,且为第一句话</li></ul></li><li>语法<ul><li>用户变量必须加@符号,不用限定类型</li><li>局部变量一般不用加@符号,需要限定类型</li><li>用户变量与局部变量的声明不同,赋值相似,使用相似</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> MYSQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> VARIABLES </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL中的视图</title>
      <link href="2021/04/24/MYSQl%E4%B8%AD%E7%9A%84%E8%A7%86%E5%9B%BE/"/>
      <url>2021/04/24/MYSQl%E4%B8%AD%E7%9A%84%E8%A7%86%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h4 id="视图-VIEW"><a href="#视图-VIEW" class="headerlink" title="视图:VIEW"></a>视图:VIEW</h4><ul><li>含义: 虚拟表,和普通表一样使用<ul><li>保存的查询语句,可以直接调用,需要查询的时候直接调用视图<ul><li>类似于java的方法</li></ul></li><li>mysql 5.1版本出现的新特性,是通过表动态生成的数据</li></ul></li><li>特点<ul><li>临时性:视图只有在被调用时虚拟表才会产生,没有保存数据,只保存了SQL逻辑,不保存查询结果</li></ul></li><li>应用场景<ul><li>多个地方用到同样的查询结果</li><li>该查询结果使用的SQL语句较复杂</li></ul></li><li>好处<ul><li>重用了sql语句</li><li>简化复杂的SQL操作,不必知道它的查询细节</li><li>保护数据、提高安全性,只提供了一个接口,没提供原表<h4 id="视图的创建与使用"><a href="#视图的创建与使用" class="headerlink" title="视图的创建与使用"></a>视图的创建与使用</h4></li></ul></li><li>案例<ol><li>查询姓名中中包含a字符的员工名、部门名和工种信息<ul><li>创建<pre><code>  CREATE VIEW       myv1  AS      SELECT       last_name,department_id,j.job_title  FROM      employees e  JOIN          jobs j  ON      e.job_id = j.job_id;</code></pre></li><li>使用<pre><code>  SELECT      *      FROM      myv1  WHERE      last_name LIKE &quot;%a%&quot;;</code></pre></li></ul></li><li>查询各部门的平均工资级别<ul><li>创建视图查看每个部门的平均工资<pre><code>  CREATE VIEW      deparment_avg_salary  AS  SELECT          department_id,AVG(salary) ag  FROM      employees  GROUP BY      department_id</code></pre></li><li>使用<pre><code>  SELECT      department_id,grade_level  FROM      department_avg_salary d  JOIN      job_grades j  ON      d.ag BETWEEN j.lowest_sal AND j.highest_sal;    </code></pre></li></ul></li><li>查询平均工资最低的部门信息<ul><li>创建视图:同2</li><li>使用视图:同4</li></ul></li><li>查询平均工资最低的部门名和工资<ul><li>创建视图:同2、3</li><li>使用视图<pre><code>  SELECT      *  FROM      department_avg_salary  WHERE      ag = (  SELECT      MIN(ag)  FROM      department_avg_salary);</code></pre><h4 id="视图的修改"><a href="#视图的修改" class="headerlink" title="视图的修改"></a>视图的修改</h4></li></ul></li></ol></li><li>方式一<ul><li>语法<pre><code>  CREATE OR REPLACE VIEW       视图名  AS          查询语句；</code></pre></li><li>作用<ul><li>创建或者改变视图<ul><li>视图不存在创建</li><li>视图存在改变</li></ul></li></ul></li></ul></li><li>方式二<ul><li>语法<pre><code>  ALTER VIEW      视图名  AS      查询语句</code></pre></li><li>作用<ul><li>改变视图,不能创建视图</li></ul></li></ul></li></ul><h4 id="视图的删除"><a href="#视图的删除" class="headerlink" title="视图的删除"></a>视图的删除</h4><ul><li><p>语法</p><pre><code>  DROP VIEW      视图名,视图名;</code></pre><h4 id="视图结构的查看"><a href="#视图结构的查看" class="headerlink" title="视图结构的查看"></a>视图结构的查看</h4></li><li><p>语法</p><ol><li>展示视图结构,和展示表结构类似<pre><code> DESC     视图名;</code></pre></li><li>展示详细信息(创建语句,视图名,字符集等等)<pre><code> SHOW CREATE VIEW     视图名;</code></pre><h4 id="视图的更新"><a href="#视图的更新" class="headerlink" title="视图的更新"></a>视图的更新</h4></li></ol></li><li><p>视图不允许更新的特点</p><ol><li><p>具有以下关键字的SQL语句:分组函数、distinct、group by、having、union、union all</p><ul><li>不是原表原数据的数组不允许更改</li></ul></li><li><p>常量视图</p></li><li><p>SELECT 中包含子查询</p></li><li><p>SELECT 中包含join,92,99语法都不行</p></li><li><p>FROM一个不能更新的视图</p></li><li><p>WHERE子句的子查询引用了FROM子句中的表    </p></li></ol></li><li><p>总结</p><ul><li>视图更新时必须只能参照原表的数据,不能更新由原表数据进行任何操作形成的视图。</li><li>视图的更新会对原表的数据进行更新,这就是为什么视图更新只能参照原表的数据。</li><li>对于创建视图时引用了不能跟新的视图时也不能更新,级联更新</li><li>视图的更新只能对单个表,单行数据更新</li><li>视图中不允许更新可能是不允许CRUD中的某一项也可能都不支持</li></ul></li></ul><h4 id="视图和表的对比"><a href="#视图和表的对比" class="headerlink" title="视图和表的对比"></a>视图和表的对比</h4><pre><code>* 创建语法    * CREATE VIEW    * CREATE TABLE* 是否占用物理空间    * 视图不占用数据存储空间,占用逻辑语句存储的空间,只保留了SQL逻辑    * 表占用数据空间* 使用    * VIEW可以使用增删改查,但一般不用,且使用起来有限制    * TABLE使用见DML</code></pre>]]></content>
      
      
      <categories>
          
          <category> MYSQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VIEW </tag>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaScript DOM树基础</title>
      <link href="2021/04/22/js-dom/"/>
      <url>2021/04/22/js-dom/</url>
      
        <content type="html"><![CDATA[<h4 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h4><ul><li><p>概念: Document Object Model 文档对象模型</p><ul><li>将标记语言文档的各个组成部分,封装为对象.可以使用这些对象,都标记语言文档进行CRUD的动态操作</li></ul></li><li><p>W3C DOM标准被分为3个不同的部分:</p><ul><li><p>核心 DOM - 针对任何结构化文档的标准模型</p><ul><li><p>Document : 文档对象</p></li><li><p>Element: 元素对象</p></li><li><p>Attribute: 属性对象</p></li><li><p>Text: 文本对象</p></li><li><p>Comment: 注释对象</p></li><li><p>Node: 节点对象,其它5个的父对象</p></li></ul></li><li><p>XML DOM - 针对XML文档的标准模型</p></li><li><p>HTML DOM - 针对HTML文档的标准类型                 </p></li></ul></li><li><p>核心DOM模型:                                                 </p><ul><li>Document:文档对象<ol><li>创建(获取):在html dom模型中可以使用windox对象获取<ol><li>window.document</li><li>document</li></ol></li><li>方法<ol><li>获取Element对象:<ol><li>getElementById():根据id属性值获取元素对象。id属性值一般唯一</li><li>getElementsByTagName():根据元素名称获得元素对象们,返回值时元素数组</li><li>getElementsByClassName():根据Class属性值获取元素对象们。返回值是一个数组</li><li>getElementsByName():根据name属性值获取元素对象们</li></ol></li><li>创建其他DOM对象:<ol><li>createAttribute(name)</li><li>createComment()</li><li>createElement()</li><li>createaTextNode()</li></ol></li></ol></li><li>属性</li></ol></li><li>Element:元素对象<ul><li>创建/获取：通过document来获取和创建</li><li>方法:<ol><li>removeAttribute():删除属性</li><li>setAttribute():设置属性</li></ol></li></ul></li><li>Node:节点对象,其他5个的父对象<ul><li>特点:所有dom对象都可以被认为是一个节点</li><li>方法:<ul><li>CRUD dom树:<ul><li>appendChild():向节点的子节点列表的结尾添加新的子节点</li><li>removeChild():删除(并返回)当前节点的指定子节点</li><li>replaceChild():用新节点替换一个子节点</li></ul></li></ul></li><li>属性<ul><li>parentNode:返回节点的父节点</li></ul></li></ul></li></ul></li><li><p>HTML DOM                                    </p><ol><li><p>标签体的设置和获取:innerHTML</p><pre><code>  &lt;div id=&quot;div1&quot;&gt;     div   &lt;/div&gt; &lt;script&gt;   var div = document.getElementById(&quot;div1&quot;);   var innerHTML = div.innerHTML;   div.innerHTML += &quot;&lt;input type=&#39;text&#39;&#39;&gt;&quot;;   //div标签追加一个文本输入框   &lt;/script&gt;</code></pre></li><li><p>使用html元素对象的属性</p></li><li><p>控制元素样式        </p><pre><code> &lt;div id=&quot;div1&quot;&gt;   div &lt;/div&gt;   &lt;script&gt;   var div1 = document.getElementById(&quot;div1&quot;);   div1.onclick = function ()&#123;     //修改样式方式1,使用元素的style属性设置     div1.style.border = &quot;1px solid red&quot;     div1.style.fontSize = &quot;20px&quot;;     //修改样式方式2     提前定义好class选择器的样式,通过元素的className属性来设置class属性     &#125;     div2.onclick = function ()&#123;     div2.className = &quot;d2&quot;;     &#125;                  &lt;/script&gt;    </code></pre></li></ol></li></ul><h4 id="事件监听机制"><a href="#事件监听机制" class="headerlink" title="事件监听机制:"></a>事件监听机制:</h4><ul><li>概念:某些组件被执行了某些操作后,出发某些代码的执行        <ul><li>事件:某些操作,如:单击,双击,键盘按下,鼠标移动                                    <ul><li>事件源：组件 如:按钮 文本输入框…</li><li>监听器: 代码</li><li>注册监听: 将事件,事件源,监听器结合在一起。当事件源上发生了某个事件，则出发执行某个监听器代码</li></ul></li><li>常见的事件<ol><li>点击事件:<ol><li>onclick 单机事件</li><li>ondbclick 双击事件</li></ol></li><li>焦点事件<ol><li>onblur:失去焦点<ul><li>一般用于表单校验(失去焦点时判断内容是否符合规则)    </li></ul></li><li>onfocus:元素获得焦点</li></ol></li><li>加载事件<ol><li>onload：一张页面或一幅图像完成加载<ul><li>window.onload<pre><code>     window.onload = function ()&#123;        document.getElementById(&quot;username&quot;).onblur = function ()&#123;         alert(&quot;失去焦点了&quot;);        &#125;      &#125;</code></pre></li></ul></li></ol></li><li>鼠标事件<ol><li>onmousedown 鼠标被按下<ul><li>定义方法时，定义一个形参，接受event对象</li><li>event对象俺的button属性可以后去鼠标按钮被点击了</li><li>左中右 012</li></ul></li><li>onmouseup 鼠标被松开</li><li>onmousemove 鼠标被移动</li><li>onmouseover 鼠标移到某元素</li><li>onmouseout 鼠标从某元素移开</li></ol></li><li>键盘事件    <ol><li>onkeydown 某个键被按下</li><li>onkeyup 某个键被松开</li><li>onkeypress 某个键被按下并松开</li></ol></li><li>选择和改变<ol><li>onchange 域的内容被改变</li><li>onselect 文本被选中</li></ol></li><li>表单事件<ol><li>onsubmit 确认按钮被点击<ul><li>可以阻止表单提交<ul><li>方法 return false:表单被阻止提交</li></ul></li></ul></li><li>onreset 重置按钮被重置 </li></ol></li></ol></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> javaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL中的事务</title>
      <link href="2021/04/21/MySQL%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1/"/>
      <url>2021/04/21/MySQL%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h4 id="TCL-Transaction-Control-Language-事务控制语言"><a href="#TCL-Transaction-Control-Language-事务控制语言" class="headerlink" title="TCL:Transaction Control Language 事务控制语言"></a>TCL:Transaction Control Language 事务控制语言</h4><ul><li><p>简介</p><ul><li>事务:一个或一组sql语句组成一个执行单元,这个执行单元要么全部执行,要么全部不执行.如果单元中某条sql语句一旦执行失败或产生错误,整个单元将会回滚。所有受到影响的数据将返回到事务开始以前的状态</li><li>引入案例: 转账<ul><li>不能一个转出后发生Exception另一个不转入</li></ul></li></ul></li><li><p>事务的acid属性</p><ol><li>原子性(Atomicity):事务不可分割,食物中的操作要么都发生,要么都不发生</li><li>一致性(Consistency):事务必须从数据库从一个状态切换到另一个一致性的状态</li><li>隔离性(Isolation):一个事务的执行不能被其他事务干扰.即一个事务内部的操作及使用的数据对并发的其他事务时隔离的,并发执行的各个事务之间不能互相干扰.</li><li>持久性(Durability):一个事务一旦被提交,它对数据库中数据的改变就是永久性的,接下来的其他操作和数据库故障不应该对其有任何影响</li></ol></li><li><p>使用</p><ul><li>事务的创建<ul><li>隐式事务:事务没有明显的开启和结束的标记<ul><li>INSERT</li><li>UPDATE</li><li>DELETE</li></ul></li><li>显示事务:事务具有明显的开启和结束的标记<ul><li>前体:必须先设置自动提交功能为禁用<pre><code>  步骤1:              SET           autocommit = 0      start          transaction; 可选,只要autocommit = 0 默认开启事务  步骤2:编写事务中的sql语句(SELECT,INSERT,UPDATE,DELETE)  步骤3:结束事务      commit;提交事务      rollback;回滚事务  SAVEPOINT 节点名;设置保存点</code></pre></li></ul></li></ul></li></ul></li><li><p>并发    </p><ul><li><p>并发问题</p><ul><li>脏读:对于两个事务T1,T2,T1读取了已经被T2更新但还没有被提交的字段之后,若T2回滚,T1 读取的内容就是临时且无效的。</li><li>不可重复读;对于两个事务T1,T2,T1读取了一个字段,然后T2更新了该字段之后,T1再次读取同一个字段,值就不同了</li><li>幻读:对于两个事务T1,T2,T1从一个表中读取了一个字段,然后T2再该表中插入了一些新的行之后,如果T1再次读取同一个表,就会多出几行</li></ul></li><li><p>事务隔离级别</p><ul><li>READ UNCOMMITTED:脏读、不可重复读、和幻读都不能阻止</li><li>READ COMMITED:能阻止脏读、不能阻止不可重复读、不能阻止幻读</li><li>REPEATABLE READ:能阻止脏读、不可重复读、不能阻止幻读</li><li>SERIALIZABLE:脏读、不可重复读、幻读都能阻止,效率较慢</li></ul></li><li><p>MYSQL 支持4种事务隔离级别.MYSQL默认的事务隔离级别 REPEATABLE READ;</p><h4 id="DELETE和TRUNCATE在事务使用时的区别"><a href="#DELETE和TRUNCATE在事务使用时的区别" class="headerlink" title="DELETE和TRUNCATE在事务使用时的区别"></a>DELETE和TRUNCATE在事务使用时的区别</h4></li></ul></li><li><p>DELETE ROLLBACK可以回滚</p></li><li><p>TRUNCATE ROLLBACK不可以回滚</p><pre><code>  SET autocommit = 0;  START TRANSACTION;    DELETE FROM account;  ROLLBACK;</code></pre></li></ul><h4 id="savepoint"><a href="#savepoint" class="headerlink" title="savepoint"></a>savepoint</h4><ul><li>回滚点</li></ul><ul><li>回滚点的使用<pre><code>  SET autocommit = 0;  START TANSACTION;  DELETE FROM       account WHERE id = 25;  SAVEPOINT a;//设置保存点  DELETE FROM account WHERE id = 28;  ROLLBACK TO a;  //回滚到25被删除28被保留的时候</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> transaction </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql Basic</title>
      <link href="2021/04/21/MySQL%E5%9F%BA%E7%A1%80/"/>
      <url>2021/04/21/MySQL%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="MySQL服务端的登陆和退出"><a href="#MySQL服务端的登陆和退出" class="headerlink" title="MySQL服务端的登陆和退出"></a>MySQL服务端的登陆和退出</h3><pre><code>方式一:通过mysql自带的客户端只限于root用户方式二:通过windows自带的客户端登陆:(如果有-h -P)就是另一台主机    mysql -h主机名 -P端口号 -u用户名 -p密码退出:exit</code></pre><h3 id="MYSQL的常见命令"><a href="#MYSQL的常见命令" class="headerlink" title="MYSQL的常见命令"></a>MYSQL的常见命令</h3><pre><code>1.查看当前所有的数据库SHOW databases;2.打开指定的库USE 库名3.查看当前库的所有表SHOW tables4.查看其它库的所有表SHOW tables FROM 库名5.创建表CREATE table 表名(    列名 列类型,    列名 列类型,    。。。    列名 列类型);6.查看表结构desc 表名;7.查看服务器的版本方法一:登陆到mysql服务端SELECT version();方法二:cmdmysql --version OR mysql -V</code></pre><h3 id="MYSQL语言规范"><a href="#MYSQL语言规范" class="headerlink" title="MYSQL语言规范"></a>MYSQL语言规范</h3><pre><code>1.不区分大小写,但建议关键字大写,表明、列名小写2.每条命令用分号结尾3.每条命令根据需要,可以进行缩进或换行4.注释    单行注释:# 注释文字    单行注释:- - 注释文字(空格)    多行注释:/* 注释文字 */</code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/04/21/hello-world/"/>
      <url>2021/04/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> inital </category>
          
      </categories>
      
      
        <tags>
            
            <tag> init </tag>
            
            <tag> hello </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
